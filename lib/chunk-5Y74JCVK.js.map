{"version":3,"sources":["../src/utils/logger/logger.ts"],"names":["EventEmitter","Redact","redact","Logger","emitter","service","release","environment","GIT_SHA","DOPPLER_ENVIRONMENT","constructor","process","on","error","fatal","setService","getData","data","safeData","cloneDeep","message","stack","JSON","stringify","pickBy","map","value","info","console","log","warn"],"mappings":";;;;;;;;;;;;AACA,oBAAkC;AADlC,OAAOA,kBAAkB;AAEzB,OAAOC,YAAY;AASnB,IAAMC,SAASD,OAAO,OAAA;AAEf,IAAME,SAAN,MAAMA;EACJC,UAAU,IAAIJ,aAAAA;EACdK,UAAU;EACVC,UAAUC,YAAYC;EACtBD,cAAcA,YAAYE;EAEjCC,cAAc;AACZC,YAAQC,GAAG,qBAAqB,CAACC,UAAU;AACzC,WAAKC,MAAM,wBAAwBD,KAAAA;IACrC,CAAA;AAEAF,YAAQC,GAAG,sBAAsB,CAACC,UAAU;AAC1C,WAAKC,MAAM,yBAAyBD,KAAAA;IACtC,CAAA;EACF;EAEOE,aAAa,CAACV,YAAoB;AACvC,SAAKA,UAAUA;EACjB;EAEUW,QAAQC,OAA4B,CAAC,GAAG;AAChD,UAAMC,eAAWC,yBACf,OAAOF,SAAS,WAAW;MAAEG,SAASH;IAAK,IAAIA,IAAI;AAErD,UAAMG,UAAUH,MAAMG,WAAW;AAEjCF,aAASb,UAAU,KAAKA;AACxBa,aAASZ,UAAU,KAAKA;AACxBY,aAASX,cAAc,KAAKA;AAC5BW,aAASG,QAAQJ,MAAMI;AACvBH,aAASE,UACP,OAAOA,YAAY,WAAWA,UAAUE,KAAKC,UAAUH,OAAAA;AAEzD,QAAI;AAEF,iBAAOI,sBAAOtB,OAAOuB,IAAIP,QAAAA,GAAW,CAACQ,UAAU,CAAC,CAACA,KAAAA;IACnD,QAAE;AACA,aAAOR;IACT;EACF;EAEOS,KAAKP,SAAiBH,MAA4B;AACvDW,YAAQC,IAAIT,SAAS,KAAKJ,QAAQC,IAAAA,CAAAA;EACpC;EAEOJ,MAAMO,SAAiBH,MAA4B;AACxDW,YAAQf,MAAMO,SAAS,KAAKJ,QAAQC,IAAAA,CAAAA;EACtC;EAEOH,MAAMM,SAAiBH,MAA4B;AACxDW,YAAQf,MAAMO,SAAS,KAAKJ,QAAQC,IAAAA,CAAAA;EACtC;EAEOa,KAAKV,SAAiBH,MAA4B;AACvDW,YAAQE,KAAKV,SAAS,KAAKJ,QAAQC,IAAAA,CAAAA;EACrC;AACF;AAxDad","sourcesContent":["import EventEmitter from \"events\";\nimport { cloneDeep, pickBy } from \"lodash\";\nimport Redact from \"redact-secrets\";\n\nimport { environment } from \"../environment\";\n\nexport type LoggerFunction = (\n  message: string,\n  data?: Record<string, any>\n) => void;\n\nconst redact = Redact(\"<***>\");\n\nexport class Logger {\n  public emitter = new EventEmitter();\n  public service = \"\";\n  public release = environment.GIT_SHA;\n  public environment = environment.DOPPLER_ENVIRONMENT;\n\n  constructor() {\n    process.on(\"uncaughtException\", (error) => {\n      this.fatal(\"uncaught exception: \", error);\n    });\n\n    process.on(\"unhandledRejection\", (error) => {\n      this.fatal(\"unhandled rejection: \", error as any);\n    });\n  }\n\n  public setService = (service: string) => {\n    this.service = service;\n  };\n\n  protected getData(data: Record<string, any> = {}) {\n    const safeData = cloneDeep(\n      typeof data === \"string\" ? { message: data } : data\n    );\n    const message = data?.message ?? \"\";\n\n    safeData.service = this.service;\n    safeData.release = this.release;\n    safeData.environment = this.environment;\n    safeData.stack = data?.stack;\n    safeData.message =\n      typeof message === \"string\" ? message : JSON.stringify(message);\n\n    try {\n      // eslint-disable-next-line unicorn/no-array-callback-reference\n      return pickBy(redact.map(safeData), (value) => !!value);\n    } catch {\n      return safeData;\n    }\n  }\n\n  public info(message: string, data?: Record<string, any>) {\n    console.log(message, this.getData(data));\n  }\n\n  public error(message: string, data?: Record<string, any>) {\n    console.error(message, this.getData(data));\n  }\n\n  public fatal(message: string, data?: Record<string, any>) {\n    console.error(message, this.getData(data));\n  }\n\n  public warn(message: string, data?: Record<string, any>) {\n    console.warn(message, this.getData(data));\n  }\n}\n"]}