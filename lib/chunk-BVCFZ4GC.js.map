{"version":3,"sources":["../src/utils/cron.ts"],"names":["CronJob","CronTime","CronManager","jobs","get","key","exists","add","options","addMany","data","cronData","delete","updateJobTime","cronTime","time","setTime","error","logger","start","running","fatal","stop","startMany","keys","map","stopMany"],"mappings":";;;;;;;;AAAA,SAASA,SAA4BC,gBAAgB;AAmB9C,IAAMC,cAAN,MAAMA;EACHC,OAAgC,CAAC;EAElCC,IAAIC,KAAa;AACtB,WAAO,KAAKF,KAAKE;EACnB;EAEOC,OAAOD,KAAa;AACzB,WAAO,CAAC,CAAC,KAAKF,KAAKE;EACrB;EAEOE,IAAI,EAAEF,KAAKG,QAAO,GAAiB;AACxC,SAAKL,KAAKE,OAAO,IAAIL,QAAQQ,OAAAA;EAC/B;EAEOC,QAAQC,MAAqB;AAClC,eAAWC,YAAYD,MAAM;AAC3B,WAAKH,IAAII,QAAAA;IACX;EACF;EAEOC,OAAOP,KAAK;AACjB,QAAI,KAAKC,OAAOD,GAAAA,GAAM;AACpB,aAAO,KAAKF,KAAKE;IACnB;EACF;EAEOQ,cAAcR,KAAaS,UAAkB;AAClD,QAAI;AACF,YAAMC,OAAO,IAAId,SAASa,QAAAA;AAC1B,WAAKX,KAAKE,MAAMW,QAAQD,IAAAA;AACxB,aAAO;IACT,SAASE,OAAP;AACAC,aAAOD,MAAM,8BAA8BZ,OAAO;QAAEY;MAAM,CAAA;IAC5D;AACA,WAAO;EACT;EAEOE,MAAMd,KAAa;AACxB,QAAI;AACF,UAAI,CAAC,KAAKF,KAAKE,MAAMe,SAAS;AAC5B,aAAKjB,KAAKE,MAAMc,MAAAA;MAClB;AACA,aAAO;IACT,SAASF,OAAP;AACAC,aAAOG,MAAM,YAAYhB,uBAAuB;QAAEY;MAAM,CAAA;IAC1D;AACA,WAAO;EACT;EAEOK,KAAKjB,KAAa;AACvB,QAAI;AACF,UAAI,KAAKF,KAAKE,MAAMe,SAAS;AAC3B,aAAKjB,KAAKE,MAAMiB,KAAAA;MAClB;AACA,aAAO;IACT,SAASL,OAAP;AACAC,aAAOG,MAAM,YAAYhB,sBAAsB;QAAEY;MAAM,CAAA;IACzD;AACA,WAAO;EACT;EAEOM,UAAUC,MAAgB;AAC/B,WAAOA,KAAKC,IAAI,CAACpB,QAAQ,KAAKc,MAAMd,GAAAA,CAAAA;EACtC;EAEOqB,SAASF,MAAgB;AAC9B,WAAOA,KAAKC,IAAI,CAACpB,QAAQ,KAAKiB,KAAKjB,GAAAA,CAAAA;EACrC;AACF;AArEaH","sourcesContent":["import { CronJob, CronJobParameters, CronTime } from \"cron\";\n\nimport { logger } from \"./logger\";\n\ndeclare module \"cron\" {\n  interface CronTime {\n    toString: () => string;\n  }\n\n  interface CronJob {\n    cronTime: CronTime;\n  }\n}\n\nexport interface CronJobData {\n  key: string;\n  options: CronJobParameters;\n}\n\nexport class CronManager {\n  private jobs: Record<string, CronJob> = {};\n\n  public get(key: string) {\n    return this.jobs[key];\n  }\n\n  public exists(key: string) {\n    return !!this.jobs[key];\n  }\n\n  public add({ key, options }: CronJobData) {\n    this.jobs[key] = new CronJob(options);\n  }\n\n  public addMany(data: CronJobData[]) {\n    for (const cronData of data) {\n      this.add(cronData);\n    }\n  }\n\n  public delete(key) {\n    if (this.exists(key)) {\n      delete this.jobs[key];\n    }\n  }\n\n  public updateJobTime(key: string, cronTime: string) {\n    try {\n      const time = new CronTime(cronTime);\n      this.jobs[key]?.setTime(time);\n      return true;\n    } catch (error) {\n      logger.error(`Could not update job time: ${key}`, { error });\n    }\n    return false;\n  }\n\n  public start(key: string) {\n    try {\n      if (!this.jobs[key]?.running) {\n        this.jobs[key]?.start();\n      }\n      return true;\n    } catch (error) {\n      logger.fatal(`Cron job ${key} failed to start`, { error });\n    }\n    return false;\n  }\n\n  public stop(key: string) {\n    try {\n      if (this.jobs[key]?.running) {\n        this.jobs[key]?.stop();\n      }\n      return true;\n    } catch (error) {\n      logger.fatal(`Cron job ${key} failed to stop`, { error });\n    }\n    return false;\n  }\n\n  public startMany(keys: string[]) {\n    return keys.map((key) => this.start(key));\n  }\n\n  public stopMany(keys: string[]) {\n    return keys.map((key) => this.stop(key));\n  }\n}\n"]}