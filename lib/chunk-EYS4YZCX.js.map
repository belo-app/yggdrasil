{"version":3,"sources":["../src/utils/logger/pino.ts"],"names":["dayjs","pino","pretty","PinoLogger","Logger","EVENT","queue","batchQueue","logs","emitter","emit","constructor","streams","environment","LOCAL","stream","process","stdout","write","message","payload","JSON","parse","metadata","omit","log","level","levels","labels","timestamp","time","toISOString","hostname","service","DOPPLER_ENVIRONMENT","msg","ip","release","trace_id","span_id","trace_flags","stringify","undefined","add","filter","instance","enabled","TEST","multistream","info","data","getData","error","fatal","warn","listenLogs","callback","on","pinoLogger"],"mappings":";;;;;;;;;;;;;;;;;;AACA,oBAAqB;AADrB,OAAOA,WAAW;AAElB,OAAOC,UAAU;AACjB,OAAOC,YAAY;AAqBnB,IAAMC,aAAN,6BAAMA,oBAAmBC,OAAAA;EACfC,QAAQ;EACRC,QAAQC,WAAgB,CAACC,SAAS;AACxC,SAAKC,QAAQC,KAAK,KAAKL,OAAOG,IAAAA;EAChC,CAAA;EAIAG,cAAc;AACZ,UAAK;AAEL,UAAMC,UAAU;MACdC,YAAYC,QAAQ;QAAEC,QAAQb,OAAO,CAAC,CAAA;MAAG,IAAI;QAAEa,QAAQC,QAAQC;MAAO;MACtE;QACEF,QAAQ;UACNG,OAAO,CAACC,YAAoB;AAC1B,kBAAMC,UAAUC,KAAKC,MAAMH,OAAAA;AAE3B,kBAAMI,eAAWC,oBAAKJ,SAAS;cAC7B;cACA;cACA;cACA;cACA;cACA;cACA;cACA;cACA;aACD;AAED,kBAAMK,MAAW;cACfC,OAAOzB,KAAK0B,OAAOC,OAAOR,QAAQM,UAAU;cAC5CG,WAAW7B,MAAMoB,QAAQU,IAAI,EAAEC,YAAW;cAC1CC,UAAUZ,QAAQY;cAClBC,SAASb,QAAQa,WAAW,KAAKA;cACjCpB,aACEO,QAAQP,eAAeA,YAAYqB;cACrCf,SAASC,QAAQe;cACjBC,IAAIhB,QAAQgB;cACZC,SAASjB,QAAQiB;cACjBC,UAAUlB,QAAQkB;cAClBC,SAASnB,QAAQmB;cACjBC,aAAapB,QAAQoB;cACrBjB,UAAUA,WAAWF,KAAKoB,UAAUlB,QAAAA,IAAYmB;YAClD;AAEA,iBAAKpC,MAAMqC,IAAIlB,GAAAA;UACjB;QACF;MACF;MACAmB,OAAO,CAAC7B,WAAW,CAAC,CAACA,OAAOA,MAAM;AAEpC,SAAK8B,WAAW5C,KACd;MACE6C,SAAS,CAACjC,YAAYkC;IACxB,GACA9C,KAAK+C,YAAYpC,OAAAA,CAAAA;EAErB;EAEOqC,KAAK9B,SAAiB+B,MAA4B;AACvD,QAAI;AACF,YAAM9B,UAAU,KAAK+B,QAAQD,IAAAA;AAE7B,WAAKL,SAASI,KAAK7B,SAASD,OAAAA;IAC9B,QAAE;IAEF;EACF;EAEOiC,MAAMjC,SAAiB+B,MAA4B;AACxD,QAAI;AACF,YAAM9B,UAAU,KAAK+B,QAAQD,IAAAA;AAE7B,WAAKL,SAASO,MAAMhC,SAASD,OAAAA;IAC/B,QAAE;IAEF;EACF;EAEOkC,MAAMlC,SAAiB+B,MAA4B;AACxD,QAAI;AACF,YAAM9B,UAAU,KAAK+B,QAAQD,IAAAA;AAE7B,WAAKL,SAASQ,MAAMjC,SAASD,OAAAA;IAC/B,QAAE;IAEF;EACF;EAEOmC,KAAKnC,SAAiB+B,MAA4B;AACvD,QAAI;AACF,YAAM9B,UAAU,KAAK+B,QAAQD,IAAAA;AAE7B,WAAKL,SAASS,KAAKlC,SAASD,OAAAA;IAC9B,QAAE;IAEF;EACF;EAEOoC,WAAWC,UAAiC;AACjD,SAAK/C,QAAQgD,GAAG,KAAKpD,OAAOmD,QAAAA;EAC9B;AACF,GAvGA;AAyGO,IAAME,aAAa,IAAIvD,WAAAA","sourcesContent":["import dayjs from \"dayjs\";\nimport { omit } from \"lodash\";\nimport pino from \"pino\";\nimport pretty from \"pino-pretty\";\n\nimport { batchQueue } from \"../batch-queue\";\nimport { environment } from \"../environment\";\nimport { Logger } from \"./logger\";\n\nexport interface Log {\n  service: string;\n  release: string;\n  environment: string;\n  message: string;\n  timestamp: string;\n  hostname: string;\n  ip: string;\n  level: string;\n  metadata?: string;\n  trace_id?: string;\n  span_id?: string;\n  trace_flags?: string;\n}\n\nclass PinoLogger extends Logger {\n  private EVENT = \"LOG_EVENT\";\n  private queue = batchQueue<Log>((logs) => {\n    this.emitter.emit(this.EVENT, logs);\n  });\n\n  public instance;\n\n  constructor() {\n    super();\n\n    const streams = [\n      environment.LOCAL ? { stream: pretty({}) } : { stream: process.stdout },\n      {\n        stream: {\n          write: (message: string) => {\n            const payload = JSON.parse(message);\n\n            const metadata = omit(payload, [\n              \"level\",\n              \"time\",\n              \"hostname\",\n              \"service\",\n              \"environment\",\n              \"msg\",\n              \"ip\",\n              \"release\",\n              \"pid\",\n            ]);\n\n            const log: Log = {\n              level: pino.levels.labels[payload.level] ?? \"\",\n              timestamp: dayjs(payload.time).toISOString(),\n              hostname: payload.hostname,\n              service: payload.service ?? this.service,\n              environment:\n                payload.environment ?? environment.DOPPLER_ENVIRONMENT,\n              message: payload.msg,\n              ip: payload.ip,\n              release: payload.release,\n              trace_id: payload.trace_id,\n              span_id: payload.span_id,\n              trace_flags: payload.trace_flags,\n              metadata: metadata ? JSON.stringify(metadata) : undefined,\n            };\n\n            this.queue.add(log);\n          },\n        },\n      },\n    ].filter((stream) => !!stream.stream);\n\n    this.instance = pino(\n      {\n        enabled: !environment.TEST,\n      },\n      pino.multistream(streams)\n    );\n  }\n\n  public info(message: string, data?: Record<string, any>) {\n    try {\n      const payload = this.getData(data);\n\n      this.instance.info(payload, message);\n    } catch {\n      //\n    }\n  }\n\n  public error(message: string, data?: Record<string, any>) {\n    try {\n      const payload = this.getData(data);\n\n      this.instance.error(payload, message);\n    } catch {\n      //\n    }\n  }\n\n  public fatal(message: string, data?: Record<string, any>) {\n    try {\n      const payload = this.getData(data);\n\n      this.instance.fatal(payload, message);\n    } catch {\n      //\n    }\n  }\n\n  public warn(message: string, data?: Record<string, any>) {\n    try {\n      const payload = this.getData(data);\n\n      this.instance.warn(payload, message);\n    } catch {\n      //\n    }\n  }\n\n  public listenLogs(callback: (logs: Log[]) => void) {\n    this.emitter.on(this.EVENT, callback);\n  }\n}\n\nexport const pinoLogger = new PinoLogger();\n"]}