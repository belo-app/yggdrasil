{"version":3,"sources":["../src/utils/format.ts"],"names":["Decimal","ipRangeCheck","formatCurrencyAmount","amount","code","symbol","locale","options","formatNumber","Intl","NumberFormat","format","getDNIfromCUIT","cuit","slice","startCase","value","trim","split","map","word","capitalize","filter","Boolean","join","emptyStringToUndefined","data","undefined","replace","regex","replaceAll","removeAccents","normalize","cleanSpecialCharacters","checkIp","ip","ips","bitcoinToSatoshis","mul","floor","satoshisToBitcoin","div","getUuidFormat","normalizedValue","String","length","Error","result","padStart","skippedCharacter","match","index","toFixedDecimals","decimalPlaces","toDP","toString","getFirstNCharacters","n"],"mappings":";;;;;;;;;AAEA,oBAA2B;AAF3B,SAASA,eAAe;AACxB,OAAOC,kBAAkB;AAGlB,SAASC,qBAAqB,EACnCC,QACAC,MACAC,QACAC,SAAS,MACTC,UAAU,CAAC,EAAC,GAOX;AACD,QAAMC,eAAe,IAAIC,KAAKC,aAAaJ,QAAQC,OAAAA,EAASI,OAC1DR,MAAAA;AAEF,SAAOE,SAAS,GAAGA,SAASG,iBAAiB,GAAGA,gBAAgBJ,QAAQ;AAC1E;AAjBgBF;AAmBT,SAASU,eAAeC,MAAc;AAC3C,SAAOA,KAAKC,MAAM,GAAG,EAAC;AACxB;AAFgBF;AAIT,SAASG,UAAUC,OAAe;AACvC,SAAOA,MACJC,KAAI,EACJC,MAAM,GAAA,EACNC,IAAI,CAACC,aAASC,0BAAWD,IAAAA,CAAAA,EACzBE,OAAOC,OAAAA,EACPC,KAAK,GAAA;AACV;AAPgBT;AAST,SAASU,uBACdT,OACAC,OAAO,MACa;AACpB,QAAMS,OAAOT,OAAOD,MAAMC,KAAI,IAAKD;AACnC,SAAOU,OAAOA,OAAOC;AACvB;AANgBF;AAQT,SAASG,QACdZ,OACAa,OACoB;AACpB,SAAOb,QAAQA,MAAMc,WAAWD,OAAO,EAAA,IAAMF;AAC/C;AALgBC;AAOT,SAASG,cAAcf,OAAe;AAC3C,SAAOY,QAAQZ,MAAMgB,UAAU,KAAA,GAAQ,kBAAA;AACzC;AAFgBD;AAIT,SAASE,uBAAuBjB,OAAe;AACpD,SAAOY,QAAQG,cAAcf,MAAMC,KAAI,CAAA,KAAO,IAAI,aAAA;AACpD;AAFgBgB;AAIT,SAASC,QAAQC,IAAYC,KAAwB;AAC1D,SAAOnC,aAAakC,IAAIC,GAAAA;AAC1B;AAFgBF;AAIT,IAAMG,oBAAoB,wBAACrB,UAAyB;AACzD,SAAO,IAAIhB,QAAQgB,KAAAA,EAAOsB,IAAI,GAAA,EAAaC,MAAK;AAClD,GAFiC;AAI1B,IAAMC,oBAAoB,wBAACxB,UAAyB;AACzD,SAAO,IAAIhB,QAAQgB,KAAAA,EAAOyB,IAAI,GAAA;AAChC,GAFiC;AAI1B,IAAMC,gBAAgB,wBAAC1B,UAA2B;AACvD,QAAM2B,kBAAkBC,OAAO5B,KAAAA,EAAOC,KAAI,EAAGa,WAAW,KAAK,EAAA;AAC7D,MAAIa,gBAAgBE,SAAS,IAAI;AAC/B,UAAM,IAAIC,MAAM,wCAAA;EAClB;AAEA,QAAMC,SAASJ,gBAAgBK,SAAS,IAAI,GAAA;AAC5C,MAAIC,mBAAmB;AACvB,SAAO,uCAAuCrB,QAC5C,SACA,CAACsB,OAAeC,UAAkB;AAChC,QAAID,UAAU,KAAK;AACjBD;AACA,aAAOC;IACT;AAEA,WAAOH,OAAOI,QAAQF,qBAAqB;EAC7C,CAAA;AAEJ,GAnB6B;AAqBtB,SAASG,gBACdpC,OACAqC,eACA;AACA,SAAO,IAAIrD,QAAQgB,KAAAA,EAAOsC,KAAKD,aAAAA,EAAeE,SAAQ;AACxD;AALgBH;AAOT,IAAMI,sBAAsB,wBAACxC,OAAeyC,MAAc;AAC/D,SAAOzC,MAAMF,MAAM,GAAG2C,CAAAA;AACxB,GAFmC","sourcesContent":["import { Decimal } from \"decimal.js\";\nimport ipRangeCheck from \"ip-range-check\";\nimport { capitalize } from \"lodash\";\n\nexport function formatCurrencyAmount({\n  amount,\n  code,\n  symbol,\n  locale = \"es\",\n  options = {},\n}: {\n  amount: string;\n  code?: string;\n  symbol?: string;\n  locale?: string;\n  options?: Intl.NumberFormatOptions;\n}) {\n  const formatNumber = new Intl.NumberFormat(locale, options).format(\n    amount as any\n  );\n  return symbol ? `${symbol}${formatNumber}` : `${formatNumber} ${code ?? \"\"}`;\n}\n\nexport function getDNIfromCUIT(cuit: string) {\n  return cuit.slice(2, -1);\n}\n\nexport function startCase(value: string) {\n  return value\n    .trim()\n    .split(\" \")\n    .map((word) => capitalize(word))\n    .filter(Boolean)\n    .join(\" \");\n}\n\nexport function emptyStringToUndefined(\n  value: string,\n  trim = true\n): string | undefined {\n  const data = trim ? value.trim() : value;\n  return data ? data : undefined;\n}\n\nexport function replace(\n  value: string,\n  regex: RegExp | string\n): string | undefined {\n  return value ? value.replaceAll(regex, \"\") : undefined;\n}\n\nexport function removeAccents(value: string) {\n  return replace(value.normalize(\"NFD\"), /[\\u0300-\\u036F]/g);\n}\n\nexport function cleanSpecialCharacters(value: string) {\n  return replace(removeAccents(value.trim()) ?? \"\", /[^ A-Za-z]/g);\n}\n\nexport function checkIp(ip: string, ips: string | string[]) {\n  return ipRangeCheck(ip, ips);\n}\n\nexport const bitcoinToSatoshis = (value: Decimal.Value) => {\n  return new Decimal(value).mul(100_000_000).floor();\n};\n\nexport const satoshisToBitcoin = (value: Decimal.Value) => {\n  return new Decimal(value).div(100_000_000);\n};\n\nexport const getUuidFormat = (value: string | number) => {\n  const normalizedValue = String(value).trim().replaceAll(\"-\", \"\");\n  if (normalizedValue.length > 32) {\n    throw new Error(\"The value length must be lower than 32\");\n  }\n\n  const result = normalizedValue.padStart(32, \"0\");\n  let skippedCharacter = 0;\n  return \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\".replace(\n    /[x-]/g,\n    (match: string, index: number) => {\n      if (match !== \"x\") {\n        skippedCharacter++;\n        return match;\n      }\n\n      return result[index - skippedCharacter] ?? \"\";\n    }\n  );\n};\n\nexport function toFixedDecimals(\n  value: string | number | Decimal,\n  decimalPlaces?: number\n) {\n  return new Decimal(value).toDP(decimalPlaces).toString();\n}\n\nexport const getFirstNCharacters = (value: string, n: number) => {\n  return value.slice(0, n);\n};\n"]}