{"version":3,"sources":["../src/utils/provider-resolver.ts"],"names":["memoizee","ProviderResolver","constructor","base","providerClassMap","getInstances","instances","key","clazz","Object","entries","defaultInstance","default","resolveByType","type"],"mappings":";;;;;AAAA,OAAOA,cAAc;AAYd,IAAMC,mBAAN,MAAMA;EAKXC,YACUC,MACAC,kBAIR;gBALQD;4BACAC;SAYHC,eAAeL,SACpB,MAAiD;AAC/C,UAAIM,YAAuD,CAAC;AAE5D,iBAAW,CAACC,KAAKC,KAAAA,KAAUC,OAAOC,QAAQ,KAAKN,iBAAgB,CAAA,GAAK;AAClE,YAAI,CAACI,OAAO;AACV;QACF;AAEAF,oBAAY;UACV,GAAGA;UACH,CAACC,MAAM,IAAIC,MAAAA;QACb;MACF;AAEA,YAAMG,kBAAkB,IAAI,KAAKR,KAAI;AACrCG,gBAAUM,UAAUD;AAEpB,aAAOL;IACT,CAAA;EA3BC;EAEIO,cAAcC,MAAkC;AACrD,UAAMR,YAAY,KAAKD,aAAY;AAEnC,WAAOC,UAAUQ,SAAUR,UAAUM;EACvC;AAuBF;AAxCaX","sourcesContent":["import memoizee from \"memoizee\";\n\ninterface Constructor<T = any> extends Function {\n  new (...arguments_: any[]): T;\n}\n\ntype ProviderMap<EnumType, ProviderType> = {\n  [key in keyof EnumType]?: ProviderType;\n} & {\n  default?: ProviderType;\n};\n\nexport class ProviderResolver<\n  EnumType extends Record<string, string | number>,\n  ProviderType,\n  ImplementationType extends ProviderType = ProviderType\n> {\n  constructor(\n    private base: Constructor<ProviderType>,\n    private providerClassMap: () => ProviderMap<\n      EnumType,\n      Constructor<ImplementationType>\n    >\n  ) {}\n\n  public resolveByType(type: keyof EnumType | \"default\") {\n    const instances = this.getInstances();\n\n    return instances[type] ?? (instances.default as ImplementationType);\n  }\n\n  public getInstances = memoizee(\n    (): ProviderMap<EnumType, ImplementationType> => {\n      let instances: ProviderMap<EnumType, ImplementationType> = {};\n\n      for (const [key, clazz] of Object.entries(this.providerClassMap())) {\n        if (!clazz) {\n          continue;\n        }\n\n        instances = {\n          ...instances,\n          [key]: new clazz(),\n        };\n      }\n\n      const defaultInstance = new this.base();\n      instances.default = defaultInstance as ImplementationType;\n\n      return instances;\n    }\n  );\n}\n"]}