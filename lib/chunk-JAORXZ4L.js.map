{"version":3,"sources":["../src/utils/queue.ts"],"names":["AWS","https","Consumer","sqs","SQS","httpOptions","agent","Agent","keepAlive","maxSockets","sendMessage","queueURL","body","parameters","MessageBody","JSON","stringify","QueueUrl","promise","deleteMessage","receiptHandle","ReceiptHandle","createConsumer","options","create","batchSize","handleMessage","message","data","parse","Body"],"mappings":";;;;;AAAA,OAAOA,SAAS;AAChB,OAAOC,WAAW;AAClB,SAASC,gBAA6C;AAE/C,IAAMC,MAAM,IAAIH,IAAII,IAAI;EAC7BC,aAAa;IACXC,OAAO,IAAIL,MAAMM,MAAM;MACrBC,WAAW;MACXC,YAAY;IACd,CAAA;EACF;AACF,CAAA;AAEA,eAAsBC,YAAYC,UAAkBC,MAA2B;AAC7E,QAAMC,aAAa;IACjBC,aAAaC,KAAKC,UAAUJ,IAAAA;IAC5BK,UAAUN;EACZ;AAEA,SAAOR,IAAIO,YAAYG,UAAAA,EAAYK,QAAO;AAC5C;AAPsBR;AASf,SAASS,cAAcR,UAAkBS,eAAuB;AACrE,QAAMP,aAAa;IACjBQ,eAAeD;IACfH,UAAUN;EACZ;AAEA,SAAOR,IAAIgB,cAAcN,UAAAA,EAAYK,QAAO;AAC9C;AAPgBC;AAcT,SAASG,eACdC,SACU;AACV,SAAOrB,SAASsB,OAAO;IACrBC,WAAW;IACXtB;IACA,GAAGoB;IACHG,eAAe,OAAOC,YAAY;AAChC,YAAMC,OAAOb,KAAKc,MAAMF,QAAQG,QAAQ,IAAA;AACxC,aAAOP,QAAQG,gBAAgB;QAAE,GAAGC;QAASC;MAAK,CAAA;IACpD;EACF,CAAA;AACF;AAZgBN","sourcesContent":["import AWS from \"aws-sdk\";\nimport https from \"https\";\nimport { Consumer, ConsumerOptions, SQSMessage } from \"sqs-consumer\";\n\nexport const sqs = new AWS.SQS({\n  httpOptions: {\n    agent: new https.Agent({\n      keepAlive: true,\n      maxSockets: 1024,\n    }),\n  },\n});\n\nexport async function sendMessage(queueURL: string, body: Record<string, any>) {\n  const parameters = {\n    MessageBody: JSON.stringify(body),\n    QueueUrl: queueURL,\n  };\n\n  return sqs.sendMessage(parameters).promise();\n}\n\nexport function deleteMessage(queueURL: string, receiptHandle: string) {\n  const parameters = {\n    ReceiptHandle: receiptHandle,\n    QueueUrl: queueURL,\n  };\n\n  return sqs.deleteMessage(parameters).promise();\n}\n\ninterface Options<Message = Record<string, any>>\n  extends Omit<ConsumerOptions, \"handleMessage\"> {\n  handleMessage?(message: SQSMessage & { data: Message }): Promise<void>;\n}\n\nexport function createConsumer<Message>(\n  options: Partial<Options<Message>>\n): Consumer {\n  return Consumer.create({\n    batchSize: 1,\n    sqs,\n    ...options,\n    handleMessage: async (message) => {\n      const data = JSON.parse(message.Body ?? \"{}\") as Message;\n      return options.handleMessage?.({ ...message, data });\n    },\n  });\n}\n"]}