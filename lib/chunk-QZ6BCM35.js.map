{"version":3,"sources":["../src/utils/batch-queue.ts"],"names":["BatchQueue","constructor","handler","size","queue","processing","process","add","item","push","length","batchQueue","callback"],"mappings":";;;;;AAEA,IAAMA,aAAN,6BAAMA,YAAAA;EAIJC,YAAoBC,SAAkCC,OAAe,IAAI;mBAArDD;gBAAkCC;SAH9CC,QAAa,CAAA;SACbC,aAAa;SAYbC,UAAU,MAAM;AACtB,WAAKD,aAAa;AAElB,UAAI;AACF,aAAKH,QAAQ;aAAI,KAAKE;SAAM;AAC5B,aAAKA,QAAQ,CAAA;MACf,UAAA;AACE,aAAKC,aAAa;MACpB;IACF;EAnB0E;EAEnEE,IAAIC,MAAS;AAClB,SAAKJ,MAAMK,KAAKD,IAAAA;AAEhB,QAAI,KAAKJ,MAAMM,UAAU,KAAKP,QAAQ,CAAC,KAAKE,YAAY;AACtD,WAAKC,QAAO;IACd;EACF;AAYF,GAxBA;AA0BO,IAAMK,aAAa,wBAAIC,aAC5B,IAAIZ,WAAcY,QAAAA,GADM","sourcesContent":["type BatchHandler<T = any> = (items: T[]) => void;\n\nclass BatchQueue<T> {\n  private queue: T[] = [];\n  private processing = false;\n\n  constructor(private handler: BatchHandler<T>, private size: number = 10) {}\n\n  public add(item: T) {\n    this.queue.push(item);\n\n    if (this.queue.length >= this.size && !this.processing) {\n      this.process();\n    }\n  }\n\n  private process = () => {\n    this.processing = true;\n\n    try {\n      this.handler([...this.queue]);\n      this.queue = [];\n    } finally {\n      this.processing = false;\n    }\n  };\n}\n\nexport const batchQueue = <T>(callback: BatchHandler<T>) =>\n  new BatchQueue<T>(callback);\n"]}