{"version":3,"sources":["../src/utils/opentelemetry.ts","../node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","../node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","../node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","../node_modules/@opentelemetry/core/build/esm/platform/node/environment.js","../node_modules/@opentelemetry/core/build/esm/utils/environment.js","../node_modules/@opentelemetry/core/build/esm/utils/sampling.js","../node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js","../node_modules/@opentelemetry/core/build/esm/ExportResult.js","../node_modules/@opentelemetry/core/build/esm/utils/promise.js","../node_modules/@opentelemetry/core/build/esm/utils/callback.js","../node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js","../node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js"],"names":["OTLPTraceExporter","Resource","opentelemetry","createContextKey","SUPPRESS_TRACING_KEY","suppressTracing","context","setValue","diag","loggingErrorHandler","ex","error","stringifyException","JSON","stringify","flattenException","result","current","Object","getOwnPropertyNames","forEach","propertyName","value","String","getPrototypeOf","delegateHandler","globalErrorHandler","_a","os","DiagLogLevel","TracesSamplerValues","DEFAULT_LIST_SEPARATOR","ENVIRONMENT_NUMBERS_KEYS","isEnvVarANumber","key","indexOf","ENVIRONMENT_LISTS_KEYS","isEnvVarAList","DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT","Infinity","DEFAULT_ATTRIBUTE_COUNT_LIMIT","DEFAULT_ENVIRONMENT","CONTAINER_NAME","ECS_CONTAINER_METADATA_URI_V4","ECS_CONTAINER_METADATA_URI","HOSTNAME","KUBERNETES_SERVICE_HOST","NAMESPACE","OTEL_BSP_EXPORT_TIMEOUT","OTEL_BSP_MAX_EXPORT_BATCH_SIZE","OTEL_BSP_MAX_QUEUE_SIZE","OTEL_BSP_SCHEDULE_DELAY","OTEL_EXPORTER_JAEGER_AGENT_HOST","OTEL_EXPORTER_JAEGER_AGENT_PORT","OTEL_EXPORTER_JAEGER_ENDPOINT","OTEL_EXPORTER_JAEGER_PASSWORD","OTEL_EXPORTER_JAEGER_USER","OTEL_EXPORTER_OTLP_ENDPOINT","OTEL_EXPORTER_OTLP_TRACES_ENDPOINT","OTEL_EXPORTER_OTLP_METRICS_ENDPOINT","OTEL_EXPORTER_OTLP_HEADERS","OTEL_EXPORTER_OTLP_TRACES_HEADERS","OTEL_EXPORTER_OTLP_METRICS_HEADERS","OTEL_EXPORTER_OTLP_TIMEOUT","OTEL_EXPORTER_OTLP_TRACES_TIMEOUT","OTEL_EXPORTER_OTLP_METRICS_TIMEOUT","OTEL_EXPORTER_ZIPKIN_ENDPOINT","OTEL_LOG_LEVEL","INFO","OTEL_NO_PATCH_MODULES","OTEL_PROPAGATORS","OTEL_RESOURCE_ATTRIBUTES","OTEL_SERVICE_NAME","OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT","OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT","OTEL_SPAN_EVENT_COUNT_LIMIT","OTEL_SPAN_LINK_COUNT_LIMIT","OTEL_TRACES_EXPORTER","OTEL_TRACES_SAMPLER","ParentBasedAlwaysOn","OTEL_TRACES_SAMPLER_ARG","OTEL_EXPORTER_OTLP_INSECURE","OTEL_EXPORTER_OTLP_TRACES_INSECURE","OTEL_EXPORTER_OTLP_METRICS_INSECURE","OTEL_EXPORTER_OTLP_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE","OTEL_EXPORTER_OTLP_COMPRESSION","OTEL_EXPORTER_OTLP_TRACES_COMPRESSION","OTEL_EXPORTER_OTLP_METRICS_COMPRESSION","OTEL_EXPORTER_OTLP_CLIENT_KEY","OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY","OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY","OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE","OTEL_EXPORTER_OTLP_PROTOCOL","OTEL_EXPORTER_OTLP_TRACES_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_PROTOCOL","OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE","parseNumber","name","environment","values","min","max","Number","isNaN","parseStringList","output","input","separator","givenValue","split","map","v","trim","logLevelMap","ALL","VERBOSE","DEBUG","WARN","ERROR","NONE","setLogLevelFromEnv","theLevel","toUpperCase","parseEnvironment","env","getEnv","processEnv","process","assign","hostname","unrefTimer","timer","unref","ExportResultCode","Deferred","_this","_promise","Promise","resolve","reject","_resolve","_reject","defineProperty","prototype","get","enumerable","configurable","val","err","__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","__spreadArray","to","from","pack","arguments","length","l","Array","slice","concat","BindOnceFuture","_callback","_that","_isCalled","_deferred","promise","args","_i","apply","then","TraceFlags","BatchSpanProcessorBase","_exporter","config","_finishedSpans","_maxExportBatchSize","maxExportBatchSize","_maxQueueSize","maxQueueSize","_scheduledDelayMillis","scheduledDelayMillis","_exportTimeoutMillis","exportTimeoutMillis","_shutdownOnce","_shutdown","warn","forceFlush","isCalled","_flushAll","onStart","_span","_parentContext","onEnd","span","spanContext","traceFlags","SAMPLED","_addToBuffer","shutdown","onShutdown","_maybeStartTimer","promises","count","Math","ceil","j","_flushOneBatch","all","catch","_clearTimer","setTimeout","Error","with","active","export","splice","clearTimeout","code","SUCCESS","_timer","undefined","__extends","extendStatics","d","b","setPrototypeOf","__proto__","p","hasOwnProperty","TypeError","__","constructor","create","BatchSpanProcessor","_super","SemanticResourceAttributes","Opentelemetry","resourceName","sdk","LOCAL","DISABLE_TRACE","NodeSDK","resource","SERVICE_NAME","spanProcessor","url","OTLP_TRACE_EXPORTER_URL","start","withTelemetry","asyncFunction"],"mappings":"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","sourcesContent":["import { OTLPTraceExporter } from \"@opentelemetry/exporter-trace-otlp-http\";\nimport { Resource } from \"@opentelemetry/resources\";\nimport * as opentelemetry from \"@opentelemetry/sdk-node\";\nimport { BatchSpanProcessor } from \"@opentelemetry/sdk-trace-base\";\nimport { SemanticResourceAttributes } from \"@opentelemetry/semantic-conventions\";\n\nimport { environment } from \"./environment\";\n\nclass Opentelemetry {\n  private sdk?: opentelemetry.NodeSDK;\n\n  constructor(resourceName: string) {\n    this.sdk =\n      !environment.LOCAL && !environment.DISABLE_TRACE\n        ? new opentelemetry.NodeSDK({\n            resource: new Resource({\n              [SemanticResourceAttributes.SERVICE_NAME]: resourceName,\n            }),\n            spanProcessor: new BatchSpanProcessor(\n              new OTLPTraceExporter({\n                url: environment.OTLP_TRACE_EXPORTER_URL,\n              })\n            ),\n          })\n        : undefined;\n  }\n\n  public async start() {\n    return this.sdk?.start();\n  }\n}\n\ntype AsyncFunction<T> = () => Promise<T>;\n\nexport async function withTelemetry<T>(\n  name: string,\n  asyncFunction: AsyncFunction<T>\n): Promise<T> {\n  const opentelemetry = new Opentelemetry(name);\n\n  return opentelemetry.start().then(() => asyncFunction());\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as os from 'os';\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var processEnv = parseEnvironment(process.env);\n    return Object.assign({\n        HOSTNAME: os.hostname(),\n    }, DEFAULT_ENVIRONMENT, processEnv);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nimport { _globalThis } from '../platform/browser/globalThis';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_TRACES_EXPORTER: 'otlp',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative'\n};\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n/**\n * Get environment in node or browser without\n * populating default values.\n */\nexport function getEnvWithoutDefaults() {\n    return typeof process !== 'undefined' ?\n        parseEnvironment(process.env) :\n        parseEnvironment(_globalThis);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer) {\n    timer.unref();\n}\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\nexport { Deferred };\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false)))\n                    .then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\nexport { BindOnceFuture };\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._finishedSpans = [];\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            return;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside of the execution of this callback.\n                _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function (result) {\n                    var _a;\n                    clearTimeout(timer);\n                    if (result.code === ExportResultCode.SUCCESS) {\n                        resolve();\n                    }\n                    else {\n                        reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                    }\n                });\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () {\n            _this._flushOneBatch()\n                .then(function () {\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                globalErrorHandler(e);\n            });\n        }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n//# sourceMappingURL=BatchSpanProcessorBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BatchSpanProcessor.prototype.onShutdown = function () { };\n    return BatchSpanProcessor;\n}(BatchSpanProcessorBase));\nexport { BatchSpanProcessor };\n//# sourceMappingURL=BatchSpanProcessor.js.map"]}