{"version":3,"sources":["../src/utils/redis-client.ts"],"names":["redis","RedisClient","hashScripts","constructor","url","Error","instance","client","createClient","connect","set","key","data","ttl","options","Number","isNaN","get","delete","del","decrementUntil","value","script","keys","arguments","String","evalSha","hashScript","scriptLoad","redisClient"],"mappings":";;;;;AAAA,YAAYA,WAAW;AAIhB,IAAMC,cAAN,MAAMA;EAGHC,cAAsC,CAAC;EAE/CC,YAAYC,KAAa;AACvB,QAAI,CAACA,KAAK;AACR,YAAM,IAAIC,MAAM,4CAAA;IAClB;AAEA,SAAKD,MAAMA;EACb;EAEA,MAAcE,WAAW;AACvB,QAAI,CAAC,KAAKC,QAAQ;AAChB,WAAKA,SAAeC,mBAAa;QAAEJ,KAAK,KAAKA;MAAI,CAAA;AACjD,YAAM,KAAKG,OAAOE,QAAO;AACzB,aAAO,KAAKF;IACd;AAEA,WAAO,KAAKA;EACd;EAEA,MAAaG,IAAIC,KAAaC,MAAcC,KAAc;AACxD,UAAMP,WAAW,MAAM,KAAKA,SAAQ;AAEpC,UAAMQ,UAAU,CAAC;AAEjB,QAAI,OAAOD,QAAQ,YAAY,CAACE,OAAOC,MAAMH,GAAAA,GAAM;AACjDC,cAAQ,QAAQD;IAClB;AAEA,QAAI;AACF,aAAOP,SAASI,IAAIC,KAAKC,MAAME,OAAAA;IACjC,QAAE;AACA,aAAO;IACT;EACF;EAEA,MAAaG,IAAIN,KAAa;AAC5B,UAAML,WAAW,MAAM,KAAKA,SAAQ;AAEpC,WAAOA,SAASW,IAAIN,GAAAA;EACtB;EAEA,MAAaO,OAAOP,KAAwB;AAC1C,UAAML,WAAW,MAAM,KAAKA,SAAQ;AAEpC,UAAMA,SAASa,IAAIR,GAAAA;EACrB;EAEA,MAAaS,eAAeT,KAAaU,QAAQ,GAAG;AAClD,UAAMf,WAAW,MAAM,KAAKA,SAAQ;AACpC,UAAMgB,SAAS,KAAKpB,YAAYS;AAChC,UAAMC,OAAO;MAAEW,MAAM;QAACZ;;MAAMa,WAAW;QAACC,OAAOJ,KAAAA;;IAAQ;AAEvD,QAAIC,QAAQ;AACV,aAAOhB,SAASoB,QAAQJ,QAAQV,IAAAA;IAClC;AAEA,UAAMe,aAAa,MAAMrB,SAASsB,WAChC;;;;iCAI2BP;WACtB;AAEP,SAAKnB,YAAYS,OAAOgB;AACxB,WAAOrB,SAASoB,QAAQC,YAAYf,IAAAA;EACtC;AACF;AAvEaX;AAyEN,IAAM4B,cAAc,IAAI5B,YAAY,MAAA","sourcesContent":["import * as redis from \"redis\";\n\n/* import { environment } from \"./environment\"; */\n\nexport class RedisClient {\n  private url: string;\n  private client: any;\n  private hashScripts: Record<string, string> = {};\n\n  constructor(url: string) {\n    if (!url) {\n      throw new Error(\"Can't create redis client without urlÂ´s\");\n    }\n\n    this.url = url;\n  }\n\n  private async instance() {\n    if (!this.client) {\n      this.client = redis.createClient({ url: this.url });\n      await this.client.connect();\n      return this.client;\n    }\n\n    return this.client;\n  }\n\n  public async set(key: string, data: string, ttl?: number) {\n    const instance = await this.instance();\n\n    const options = {};\n\n    if (typeof ttl === \"number\" && !Number.isNaN(ttl)) {\n      options[\"PX\"] = ttl;\n    }\n\n    try {\n      return instance.set(key, data, options);\n    } catch {\n      return false;\n    }\n  }\n\n  public async get(key: string) {\n    const instance = await this.instance();\n\n    return instance.get(key);\n  }\n\n  public async delete(key: string | string[]) {\n    const instance = await this.instance();\n\n    await instance.del(key);\n  }\n\n  public async decrementUntil(key: string, value = 0) {\n    const instance = await this.instance();\n    const script = this.hashScripts[key];\n    const data = { keys: [key], arguments: [String(value)] };\n\n    if (script) {\n      return instance.evalSha(script, data);\n    }\n\n    const hashScript = await instance.scriptLoad(\n      `local value = redis.call('GET', KEYS[1]) or '0'\n       if value > '0' then \n       return redis.call('DECR',KEYS[1]) \n       else \n       error('Value lower than ${value}')\n       end`\n    );\n    this.hashScripts[key] = hashScript;\n    return instance.evalSha(hashScript, data);\n  }\n}\n\nexport const redisClient = new RedisClient(\"mock\");\n"]}