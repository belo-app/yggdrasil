{"version":3,"sources":["../../src/utils/knex.ts"],"names":["Knex","knexSnakeCaseMappers","Model","knexInstance","knexReadInstance","knex","knexRead","setupDatabase","config","client","pool","min","max","createTimeoutMillis","acquireTimeoutMillis","idleTimeoutMillis","reapIntervalMillis","createRetryIntervalMillis","useNullAsDefault","connection","environment","DATABASE_URL","DATABASE_READ_REPLICA_URL","connectToMongo","TEST","Proxy","get","_target","property","handler","bind","apply","_thisArgument","argumentsList"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,UAAgC;AACvC,SAASC,sBAAsBC,aAAa;AAY5C,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AACJ,IAAIC;AAEG,IAAMC,gBAAgB,8BAAOC,SAAkC,CAAC,MAAM;AAC3EL,iBAAeH,KAAK;IAClBS,QAAQ;IAERC,MAAM;MACJC,KAAKH,OAAOE,MAAMC,OAAO;MACzBC,KAAKJ,OAAOE,MAAMC,OAAO;MAEzBE,qBAAqB;MACrBC,sBAAsB;MACtBC,mBAAmB;MACnBC,oBAAoB;MACpBC,2BAA2B;IAC7B;IAEAC,kBAAkB;IAElBC,YAAYC,YAAYC;IAExB,GAAGpB,qBAAAA;EACL,CAAA;AAEAG,qBAAmBJ,KAAK;IACtBS,QAAQ;IAERC,MAAM;MACJC,KAAKH,OAAOE,MAAMC,OAAO;MACzBC,KAAKJ,OAAOE,MAAMC,OAAO;MAEzBE,qBAAqB;MACrBC,sBAAsB;MACtBC,mBAAmB;MACnBC,oBAAoB;MACpBC,2BAA2B;IAC7B;IAEAC,kBAAkB;IAElBC,YAAYC,YAAYE;IAExB,GAAGrB,qBAAAA;EACL,CAAA;AAEAI,SAAOF;AACPG,aAAWF;AAEXF,QAAMG,KAAKA,IAAAA;AACX,QAAMkB,eAAAA;AACR,GAhD6B;AAkD7BhB,cAAAA;AAEA,IAAIa,YAAYI,MAAM;AACpBnB,SAAO,IAAIoB,MACT,WAAY;AACV,WAAO;EACT,GACA;IACEC,IAAIC,SAASC,UAAU;AACrB,YAAMC,UAAU1B,aAAayB;AAE7B,aAAO,OAAOC,YAAY,aACtBA,QAAQC,KAAK3B,YAAAA,IACb0B;IACN;IACAE,MAAMJ,SAASK,eAAeC,eAAe;AAC3C,aAAO9B,aAAAA,GAAgB8B,aAAAA;IACzB;EACF,CAAA;AAEJ","sourcesContent":["import Knex, { Knex as KnexType } from \"knex\";\nimport { knexSnakeCaseMappers, Model } from \"objection\";\n\nimport { environment } from \"./environment\";\nimport { connectToMongo } from \"./mongoose\";\n\nexport interface DatabaseConfig {\n  pool: {\n    min: number;\n    max: number;\n  };\n}\n\nlet knexInstance!: KnexType;\nlet knexReadInstance!: KnexType;\nlet knex!: KnexType;\nlet knexRead!: KnexType;\n\nexport const setupDatabase = async (config: Partial<DatabaseConfig> = {}) => {\n  knexInstance = Knex({\n    client: \"postgresql\",\n\n    pool: {\n      min: config.pool?.min ?? 0,\n      max: config.pool?.min ?? 5,\n\n      createTimeoutMillis: 30_000,\n      acquireTimeoutMillis: 10_000,\n      idleTimeoutMillis: 30_000,\n      reapIntervalMillis: 1000,\n      createRetryIntervalMillis: 100,\n    },\n\n    useNullAsDefault: true,\n\n    connection: environment.DATABASE_URL,\n\n    ...knexSnakeCaseMappers(),\n  });\n\n  knexReadInstance = Knex({\n    client: \"postgresql\",\n\n    pool: {\n      min: config.pool?.min ?? 0,\n      max: config.pool?.min ?? 5,\n\n      createTimeoutMillis: 30_000,\n      acquireTimeoutMillis: 10_000,\n      idleTimeoutMillis: 30_000,\n      reapIntervalMillis: 1000,\n      createRetryIntervalMillis: 100,\n    },\n\n    useNullAsDefault: true,\n\n    connection: environment.DATABASE_READ_REPLICA_URL,\n\n    ...knexSnakeCaseMappers(),\n  });\n\n  knex = knexInstance;\n  knexRead = knexReadInstance;\n\n  Model.knex(knex);\n  await connectToMongo();\n};\n\nsetupDatabase();\n\nif (environment.TEST) {\n  knex = new Proxy(\n    function () {\n      return void 0;\n    } as any,\n    {\n      get(_target, property) {\n        const handler = knexInstance[property];\n\n        return typeof handler === \"function\"\n          ? handler.bind(knexInstance)\n          : handler;\n      },\n      apply(_target, _thisArgument, argumentsList) {\n        return knexInstance(...argumentsList);\n      },\n    }\n  ) as KnexType;\n}\n\nexport { knex, knexRead };\n"]}