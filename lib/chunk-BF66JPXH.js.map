{"version":3,"sources":["../src/utils/metrics.ts"],"names":["PrometheusExporter","MeterProvider","memoize","os","PrometheusMetricService","metrics","constructor","meterProvider","environment","LOCAL","undefined","addMetricReader","port","meter","getMeter","getEnvironmentAttributes","attributes","hostname","DOPPLER_ENVIRONMENT","getOrCreateCounter","name","options","counter","createCounter","Object","assign","add","value","getOrCreateHistogram","histogram","createHistogram","record","prometheusMetricsService"],"mappings":";;;;;;;;AAOA,SAASA,0BAA0B;AACnC,SAASC,qBAAqB;AAC9B,OAAOC,aAAa;AACpB,OAAOC,QAAQ;AAIf,IAAMC,0BAAN,6BAAMA,yBAAAA;EAEIC,UAAe,CAAC;EAExBC,cAAc;AACZ,UAAMC,gBAAgB,CAACC,YAAYC,QAAQ,IAAIR,cAAAA,IAAkBS;AAEjEH,mBAAeI,gBACb,IAAIX,mBAAmB;MACrBY,MAAM;IACR,CAAA,CAAA;AAGF,SAAKC,QAAQN,eAAeO,SAAS,YAAA;EACvC;EAEOA,WAAW;AAChB,WAAO,KAAKD;EACd;EAEOE,2BAA2Bb,QAAQ,CAACc,eAAkC;AAC3E,WAAO;MACLC,UAAUd,GAAGc,SAAQ;MACrBT,aAAaA,YAAYU;MACzB,GAAGF;IACL;EACF,CAAA;EAEOG,mBACLC,MACAC,SACqB;AACrB,QAAI,KAAKhB,QAAQe,OAAO;AACtB,aAAO,KAAKf,QAAQe;IACtB;AAEA,QAAI,CAAC,KAAKP,OAAO;AACf;IACF;AAEA,UAAMS,UAAU,KAAKT,OAAOU,cAAcH,MAAMC,OAAAA;AAEhD,SAAKhB,QAAQe,QAAQ;MACnB,GAAGI,OAAOC,OAAO,CAAC,GAAGH,OAAAA;MACrBI,KAAK,CAACC,OAAeX,eACnBM,QAAQI,IAAIC,OAAO,KAAKZ,yBAAyBC,UAAAA,CAAAA;IACrD;AAEA,WAAO,KAAKX,QAAQe;EACtB;EAEOQ,qBACLR,MACAC,SACuB;AACvB,QAAI,KAAKhB,QAAQe,OAAO;AACtB,aAAO,KAAKf,QAAQe;IACtB;AAEA,QAAI,CAAC,KAAKP,OAAO;AACf;IACF;AAEA,UAAMgB,YAAY,KAAKhB,OAAOiB,gBAAgBV,MAAMC,OAAAA;AAEpD,SAAKhB,QAAQe,QAAQ;MACnB,GAAGI,OAAOC,OAAO,CAAC,GAAGI,SAAAA;MACrBE,QAAQ,CAACJ,OAAeX,eACtBa,UAAUE,OAAOJ,OAAO,KAAKZ,yBAAyBC,UAAAA,CAAAA;IAC1D;AAEA,WAAO,KAAKX,QAAQe;EACtB;AACF,GAzEA;AA2EO,IAAMY,2BAA2B,IAAI5B,wBAAAA","sourcesContent":["import {\n  Counter,\n  Histogram,\n  Meter,\n  MetricAttributes,\n  MetricOptions,\n} from \"@opentelemetry/api\";\nimport { PrometheusExporter } from \"@opentelemetry/exporter-prometheus\";\nimport { MeterProvider } from \"@opentelemetry/sdk-metrics\";\nimport memoize from \"memoizee\";\nimport os from \"os\";\n\nimport { environment } from \"./environment\";\n\nclass PrometheusMetricService {\n  private meter?: Meter;\n  private metrics: any = {};\n\n  constructor() {\n    const meterProvider = !environment.LOCAL ? new MeterProvider() : undefined;\n\n    meterProvider?.addMetricReader(\n      new PrometheusExporter({\n        port: 9464,\n      })\n    );\n\n    this.meter = meterProvider?.getMeter(\"prometheus\");\n  }\n\n  public getMeter() {\n    return this.meter;\n  }\n\n  public getEnvironmentAttributes = memoize((attributes?: MetricAttributes) => {\n    return {\n      hostname: os.hostname(),\n      environment: environment.DOPPLER_ENVIRONMENT,\n      ...attributes,\n    };\n  });\n\n  public getOrCreateCounter(\n    name: string,\n    options?: MetricOptions\n  ): Counter | undefined {\n    if (this.metrics[name]) {\n      return this.metrics[name];\n    }\n\n    if (!this.meter) {\n      return;\n    }\n\n    const counter = this.meter?.createCounter(name, options);\n\n    this.metrics[name] = {\n      ...Object.assign({}, counter),\n      add: (value: number, attributes?: MetricAttributes) =>\n        counter.add(value, this.getEnvironmentAttributes(attributes)),\n    };\n\n    return this.metrics[name];\n  }\n\n  public getOrCreateHistogram(\n    name: string,\n    options?: MetricOptions\n  ): Histogram | undefined {\n    if (this.metrics[name]) {\n      return this.metrics[name];\n    }\n\n    if (!this.meter) {\n      return;\n    }\n\n    const histogram = this.meter?.createHistogram(name, options);\n\n    this.metrics[name] = {\n      ...Object.assign({}, histogram),\n      record: (value: number, attributes?: MetricAttributes) =>\n        histogram.record(value, this.getEnvironmentAttributes(attributes)),\n    };\n\n    return this.metrics[name];\n  }\n}\n\nexport const prometheusMetricsService = new PrometheusMetricService();\n"]}