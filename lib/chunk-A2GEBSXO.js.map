{"version":3,"sources":["../src/service/routes/utils.ts"],"names":["swagger","swaggerUi","openAPISnippet","targets","httpRequestMethods","Set","addRequestSamples","openApiSpec","openApi","JSON","parse","stringify","singlePath","paths","method","Object","keys","filter","has","snippets","getEndpointSnippets","samples","snippet","push","lang","title","split","source","content","error","console","log","openApiOptions","tags","openapi","info","description","version","url","altText","servers","components","securitySchemes","bearerAuth","type","scheme","bearerFormat","BaseController","constructor","path","controllers","extend","router","instance","_","next","configDocs","controller","register","prefix","addHook","request","response","includes","boom","notFound","payload","routePrefix","MulterS3Storage","options","client","S3Bucket","bucket","getKey","getDefaultKey","file","fileExtension","getFileExtension","originalname","uuid","_handleFile","_request","done","stream","Error","key","uploadFile","undefined","ContentType","mimetype","ACL","acl","then","catch","_removeFile","deleteFile"],"mappings":"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","sourcesContent":["import swagger, { SwaggerOptions } from \"@fastify/swagger\";\nimport swaggerUi from \"@fastify/swagger-ui\";\nimport { FastifyRequest } from \"fastify\";\nimport { File, StorageEngine } from \"fastify-multer/lib/interfaces\";\nimport openAPISnippet from \"openapi-snippet\";\nimport { Stream } from \"stream\";\n\nimport { getFileExtension, S3Bucket, uuid } from \"../../utils\";\nimport { AppPluginCallback } from \"../types\";\n\nexport interface Controller {\n  path: string;\n  router: AppPluginCallback;\n}\n\nexport interface Tag {\n  name: string;\n  \"x-displayName\": string;\n  description: string;\n}\n\nconst targets = [\n  \"shell_curl\",\n  \"node_fetch\",\n  \"python_requests\",\n  \"go_native\",\n  \"java_okhttp\",\n];\n\nconst httpRequestMethods = new Set([\n  \"get\",\n  \"head\",\n  \"post\",\n  \"put\",\n  \"delete\",\n  \"options\",\n  \"trace\",\n  \"patch\",\n]);\n\nconst addRequestSamples = (openApiSpec) => {\n  const openApi = JSON.parse(JSON.stringify(openApiSpec));\n\n  for (const singlePath in openApi.paths) {\n    for (const method of Object.keys(openApi.paths[singlePath]).filter(\n      (method) => httpRequestMethods.has(method)\n    )) {\n      try {\n        const snippets = openAPISnippet.getEndpointSnippets(\n          openApi,\n          singlePath,\n          method,\n          targets\n        );\n        const samples: any[] = [];\n\n        for (const snippet of snippets.snippets) {\n          samples.push({\n            lang: snippet.title.split(\" \")[0],\n            source: snippet.content,\n          });\n        }\n        openApi.paths[singlePath][method][\"x-codeSamples\"] = samples;\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  }\n\n  return openApi;\n};\n\nconst openApiOptions = (tags: Tag[]): SwaggerOptions => ({\n  openapi: {\n    info: {\n      title: \"belo API docs\",\n      description: \"belo API\",\n      version: \"1.0.0\",\n      \"x-logo\": {\n        url: \"https://www.belo.app/image/referrals.jpg\",\n        altText: \"logo\",\n      },\n    } as any,\n    tags: tags as any,\n    servers: [\n      {\n        url: \"https://api.belo.app\",\n        description: \"Production API\",\n      },\n      {\n        url: \"https://sandbox.belo.app\",\n        description: \"Sandbox API\",\n      },\n    ],\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: \"http\",\n          scheme: \"bearer\",\n          bearerFormat: \"JWT\",\n        },\n      },\n    },\n  },\n});\n\nexport class BaseController implements Controller {\n  constructor(\n    public path = \"\",\n    private controllers: Controller[],\n    private tags: Tag[] = [],\n    private extend?: AppPluginCallback\n  ) {}\n\n  public router: AppPluginCallback = (instance, _, next) => {\n    this.configDocs(instance, _, next);\n\n    this.extend?.(instance, _, next);\n\n    for (const controller of this.controllers) {\n      instance.register(controller.router, { prefix: controller.path });\n    }\n\n    next();\n  };\n\n  private configDocs: AppPluginCallback = (instance) => {\n    instance.addHook(\"preHandler\", (request, response, next) => {\n      if (request.url.includes(\"docs/static\")) {\n        return response.boom.notFound();\n      }\n\n      next();\n    });\n\n    instance.addHook(\"preSerialization\", async (request, _, payload) => {\n      if (request.url.includes(\"docs/json\")) {\n        console.log(\"boom\");\n        return addRequestSamples(payload);\n      }\n\n      return payload;\n    });\n\n    instance.register(swagger, openApiOptions(this.tags));\n\n    instance.register(swaggerUi, {\n      routePrefix: \"/docs\",\n    });\n  };\n}\n\ntype S3File = File & { key: string; url: string };\n\nexport class MulterS3Storage implements StorageEngine {\n  private client: S3Bucket;\n  private acl?: string;\n  private getKey?: (file: File) => string;\n\n  constructor(options: {\n    bucket: string;\n    getKey?: (file: File) => string;\n    acl: string;\n  }) {\n    this.client = new S3Bucket(options.bucket);\n    this.getKey = options.getKey;\n  }\n\n  private getDefaultKey = (file: File) => {\n    const fileExtension = getFileExtension(file.originalname) ?? \"\";\n    return `${uuid()}.${fileExtension}`;\n  };\n\n  _handleFile = (\n    _request: FastifyRequest,\n    file: File,\n    done: (error?: Error | null, info?: any) => void\n  ) => {\n    if (!file.stream) {\n      done(new Error(`Invalid file ${file.originalname}`));\n    }\n\n    const key = this.getKey?.(file) ?? this.getDefaultKey(file);\n\n    this.client\n      .uploadFile(file.stream as Stream, key, undefined, {\n        ContentType: file.mimetype,\n        ACL: this.acl,\n      })\n      .then((url: string) => {\n        done(undefined, { url, key });\n      })\n      .catch((error) => done(error));\n  };\n\n  _removeFile = (\n    _request: FastifyRequest,\n    file: S3File,\n    done: (error?: Error | null, info?: Partial<S3File>) => void\n  ) => {\n    this.client.deleteFile(file.key, done);\n  };\n}\n"]}