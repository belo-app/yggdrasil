{"version":3,"sources":["../src/service/types/route.ts"],"names":["ResponseWithoutData","data","Type","Optional","Response","Object","description","PagedResponse","hasMore","Boolean","withAuth","schema","security","bearerAuth"],"mappings":";;;;;;;;AAsDO,IAAMA,sBAAsB,wBAAuBC,UAAgB;EACxE,KAAKC,KAAKC,SAASF,IAAAA;AACrB,IAFmC;AAI5B,IAAMG,WAAW,wBAAuBH,UAAgB;EAC7D,KAAKC,KAAKG,OACR;IACEJ,MAAMC,KAAKC,SAASF,IAAAA;EACtB,GACA;IACEK,aAAa;EACf,CAAA;AAEJ,IATwB;AAWjB,IAAMC,gBAAgB,wBAAuBN,UAAgB;EAClE,KAAKC,KAAKG,OACR;IACEJ,MAAMC,KAAKC,SAASF,IAAAA;IACpBO,SAASN,KAAKC,SAASD,KAAKO,QAAO,CAAA;EACrC,GACA;IACEH,aAAa;EACf,CAAA;AAEJ,IAV6B;AAYtB,IAAMI,WAAW,wBAAmBC,WAAc;AACvD,SAAO;IACL,GAAGA;IACHC,UAAU;MACR;QACEC,YAAY,CAAA;MACd;;EAEJ;AACF,GATwB","sourcesContent":["import { RateLimitPluginOptions } from \"@fastify/rate-limit\";\nimport { TypeBoxTypeProvider } from \"@fastify/type-provider-typebox\";\nimport { Static, TSchema } from \"@sinclair/typebox\";\nimport {\n  ContextConfigDefault,\n  FastifyInstance,\n  FastifyPluginCallback,\n  FastifySchema,\n  onRequestHookHandler,\n  preHandlerAsyncHookHandler,\n  preHandlerHookHandler,\n  RouteHandlerMethod,\n} from \"fastify\";\nimport { IncomingMessage, Server, ServerResponse } from \"http\";\n\nimport { Type } from \"../../utils\";\n\nexport interface Schema {\n  summary: string;\n  description?: string;\n  tags: string[];\n  response: { 200: TSchema };\n  body?: TSchema;\n  querystring?: TSchema;\n  params?: TSchema;\n  headers?: TSchema;\n}\n\nexport interface RouteSchema<S extends Schema> {\n  Reply: Static<S[\"response\"][200]>;\n  Body: S[\"body\"] extends TSchema ? Static<S[\"body\"]> : undefined;\n  Querystring: S[\"querystring\"] extends TSchema\n    ? Static<S[\"querystring\"]>\n    : undefined;\n  Params: S[\"params\"] extends TSchema ? Static<S[\"params\"]> : undefined;\n  Headers: S[\"headers\"] extends TSchema ? Static<S[\"headers\"]> : undefined;\n}\n\ntype ContextConfig = ContextConfigDefault & {\n  permissions?: string[];\n  rawBody?: boolean;\n  rateLimit?: RateLimitPluginOptions;\n};\n\nexport type RouteHandler<S extends Schema> = RouteHandlerMethod<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  RouteSchema<S>,\n  ContextConfig,\n  FastifySchema,\n  TypeBoxTypeProvider\n>;\n\nexport const ResponseWithoutData = <Data extends TSchema>(data: Data) => ({\n  200: Type.Optional(data),\n});\n\nexport const Response = <Data extends TSchema>(data: Data) => ({\n  200: Type.Object(\n    {\n      data: Type.Optional(data),\n    },\n    {\n      description: \"Successful response\",\n    }\n  ),\n});\n\nexport const PagedResponse = <Data extends TSchema>(data: Data) => ({\n  200: Type.Object(\n    {\n      data: Type.Optional(data),\n      hasMore: Type.Optional(Type.Boolean()),\n    },\n    {\n      description: \"Successful response\",\n    }\n  ),\n});\n\nexport const withAuth = <T extends Schema>(schema: T) => {\n  return {\n    ...schema,\n    security: [\n      {\n        bearerAuth: [],\n      },\n    ],\n  };\n};\n\nexport type AppInstance = FastifyInstance<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  any,\n  TypeBoxTypeProvider\n>;\n\nexport type AppPluginCallback = FastifyPluginCallback<\n  any,\n  Server,\n  TypeBoxTypeProvider\n>;\n\nexport type AppPreHandlerHookHandler = preHandlerHookHandler<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  RouteSchema<any>,\n  ContextConfig,\n  FastifySchema,\n  TypeBoxTypeProvider\n>;\n\nexport type AppPreHandlerAsyncHookHandler = preHandlerAsyncHookHandler<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  RouteSchema<any>,\n  ContextConfig,\n  FastifySchema,\n  TypeBoxTypeProvider\n>;\n\nexport type AppOnRequestHookHandler = onRequestHookHandler<\n  Server,\n  IncomingMessage,\n  ServerResponse,\n  RouteSchema<any>,\n  ContextConfig,\n  FastifySchema,\n  TypeBoxTypeProvider\n>;\n"]}