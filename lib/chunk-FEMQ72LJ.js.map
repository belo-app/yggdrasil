{"version":3,"sources":["../src/utils/phone.ts"],"names":["PhoneNumberFormat","PhoneNumberUtil","ExtraPhoneNumberFormat","RAW_NATIONAL","PhoneParser","parser","getInstance","rawParse","phoneNumber","countryCode","parseAndKeepRawInput","Errors","invalidPhoneNumber","validatePhoneForRegion","phone","isValidPhone","isValidNumberForRegion","format","String","getNationalNumber","parseAndValidatePhoneNumber","E164","phoneParser"],"mappings":";;;;;;;;AAAA,SAEEA,mBACAC,uBACK;IAIA;UAAKC,yBAAsB;AAAtBA,EAAAA,wBACVC,kBAAAA;GADUD,2BAAAA,yBAAAA,CAAAA,EAAAA;AAML,IAAME,cAAN,MAAMA;EACHC,SAASJ,gBAAgBK,YAAW;EAEpCC,SAASC,aAAqBC,aAAqB;AACzD,QAAI;AACF,aAAO,KAAKJ,OAAOK,qBAAqBF,aAAaC,WAAAA;IACvD,QAAE;AACA,YAAME,OAAOC,mBAAmB,gBAAA;IAClC;EACF;EAEQC,uBAAuBC,OAAoBL,aAAqB;AACtE,UAAMM,eAAe,KAAKV,OAAOW,uBAAuBF,OAAOL,WAAAA;AAE/D,QAAI,CAACM,cAAc;AACjB,YAAMJ,OAAOC,mBAAmB,iBAAA;IAClC;EACF;EAEQK,OAAOH,OAAoBG,QAA+B;AAChE,QAAIA,WAAWf,uBAAuBC,cAAc;AAClD,aAAOe,OAAOJ,MAAMK,kBAAiB,KAAM,EAAA;IAC7C;AACA,WAAO,KAAKd,OAAOY,OAAOH,OAAOG,MAAAA;EACnC;EAEOG,4BACLZ,aACAC,aACAQ,SAAgCjB,kBAAkBqB,MAClD;AACA,UAAMP,QAAQ,KAAKP,SAASC,aAAaC,WAAAA;AAEzC,SAAKI,uBAAuBC,OAAOL,WAAAA;AAEnC,WAAO,KAAKQ,OAAOH,OAAOG,MAAAA;EAC5B;AACF;AArCab;AAuCN,IAAMkB,cAAc,IAAIlB,YAAAA","sourcesContent":["import {\n  PhoneNumber,\n  PhoneNumberFormat,\n  PhoneNumberUtil,\n} from \"google-libphonenumber\";\n\nimport { Errors } from \"./error\";\n\nexport enum ExtraPhoneNumberFormat {\n  RAW_NATIONAL = \"RAW_NATIONAL\",\n}\n\nexport type BeloPhoneNumberFormat = PhoneNumberFormat | ExtraPhoneNumberFormat;\n\nexport class PhoneParser {\n  private parser = PhoneNumberUtil.getInstance();\n\n  private rawParse(phoneNumber: string, countryCode: string) {\n    try {\n      return this.parser.parseAndKeepRawInput(phoneNumber, countryCode);\n    } catch {\n      throw Errors.invalidPhoneNumber(\"Invalid format\");\n    }\n  }\n\n  private validatePhoneForRegion(phone: PhoneNumber, countryCode: string) {\n    const isValidPhone = this.parser.isValidNumberForRegion(phone, countryCode);\n\n    if (!isValidPhone) {\n      throw Errors.invalidPhoneNumber(\"Invalid country\");\n    }\n  }\n\n  private format(phone: PhoneNumber, format: BeloPhoneNumberFormat) {\n    if (format === ExtraPhoneNumberFormat.RAW_NATIONAL) {\n      return String(phone.getNationalNumber() ?? \"\");\n    }\n    return this.parser.format(phone, format);\n  }\n\n  public parseAndValidatePhoneNumber(\n    phoneNumber: string,\n    countryCode: string,\n    format: BeloPhoneNumberFormat = PhoneNumberFormat.E164\n  ) {\n    const phone = this.rawParse(phoneNumber, countryCode);\n\n    this.validatePhoneForRegion(phone, countryCode);\n\n    return this.format(phone, format);\n  }\n}\n\nexport const phoneParser = new PhoneParser();\n"]}