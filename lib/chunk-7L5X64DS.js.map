{"version":3,"sources":["../src/utils/backoff.ts"],"names":["backoff","handler","maxAttempts","delayInMilliseconds","attempts","Array","from","length","map","_","index","attempt","totalDelay","delay","data","Errors","backoffFailed"],"mappings":";;;;;;;;;;;AAGA,eAAsBA,QACpBC,SACA,EACEC,aACAC,oBAAmB,GAEkB;AACvC,QAAMC,WAAWC,MAAMC,KAAK;IAAEC,QAAQL;EAAY,CAAA,EAAGM,IAAI,CAACC,GAAGC,UAAUA,KAAAA;AAEvE,aAAWC,WAAWP,UAAU;AAC9B,UAAMQ,cAAc,KAAKD,UAAU,KAAKR;AAExC,UAAMU,MAAMD,UAAAA;AAEZ,QAAI;AACF,YAAME,OAAO,MAAMb,QAAAA;AAEnB,aAAO;QAAEa;QAAMH;MAAQ;IACzB,QAAE;IAEF;EACF;AAEA,QAAMI,OAAOC,cAAa;AAC5B;AAxBsBhB","sourcesContent":["import { delay } from \"./delay\";\nimport { Errors } from \"./error\";\n\nexport async function backoff<T>(\n  handler: () => Promise<T>,\n  {\n    maxAttempts,\n    delayInMilliseconds,\n  }: { maxAttempts: number; delayInMilliseconds: number }\n): Promise<{ data: T; attempt: number }> {\n  const attempts = Array.from({ length: maxAttempts }).map((_, index) => index);\n\n  for (const attempt of attempts) {\n    const totalDelay = (2 ** attempt - 1) * delayInMilliseconds;\n\n    await delay(totalDelay);\n\n    try {\n      const data = await handler();\n\n      return { data, attempt };\n    } catch {\n      //\n    }\n  }\n\n  throw Errors.backoffFailed();\n}\n"]}