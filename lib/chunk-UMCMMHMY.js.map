{"version":3,"sources":["../src/utils/calc.ts"],"names":["Decimal","volumeAverage","prices","totalVolume","estimateVolume","average","volumeAccumulated","convertVolume","price","data","lessThanOrEqualTo","push","minus","volume","reduce","vol","next","add","priceVolume","mul","div","inverted","isNegativePrice","validAmount","amount","greaterThan","difference","number1","number2"],"mappings":";;;;;AAAA,OAAOA,aAAa;AAOb,IAAMC,gBAAgB,wBAC3BC,QACAC,aACAC,mBACG;AACH,MAAI,CAACD,aAAa;AAChB,WAAOE,QAAQH,MAAAA;EACjB;AAEA,MAAII,oBAAoBF,iBACpBG,cAAcJ,aAAaD,OAAO,IAAIM,OAAOJ,cAAAA,IAC7C,IAAIJ,QAAQG,WAAAA;AAChB,QAAMM,OAAoB,CAAA;AAE1B,aAAWD,SAASN,QAAQ;AAC1B,QAAII,kBAAkBI,kBAAkB,CAAA,GAAI;AAC1C;IACF;AACAD,SAAKE,KAAKH,KAAAA;AACVF,wBAAoBA,kBAAkBM,MAAMJ,MAAMK,MAAM;EAC1D;AAEA,SAAOR,QAAQI,IAAAA;AACjB,GAvB6B;AAyBtB,IAAMJ,UAAU,wBAACH,WAAwB;AAC9C,QAAMW,SAASX,OAAOY,OACpB,CAACC,KAAKC,SAASD,IAAIE,IAAID,KAAKH,MAAM,GAClC,IAAIb,QAAQ,CAAA,CAAA;AAEd,QAAMkB,cAAchB,OAAOY,OACzB,CAACN,OAAOQ,SAASR,MAAMS,IAAI,IAAIjB,QAAQgB,KAAKR,KAAK,EAAEW,IAAIH,KAAKH,MAAM,CAAA,GAClE,IAAIb,QAAQ,CAAA,CAAA;AAGd,SAAOkB,YAAYE,IAAIP,MAAAA;AACzB,GAXuB;AAahB,IAAMN,gBAAgB,wBAC3BM,QACAL,QAAQ,KACRa,aACG;AACH,QAAMC,kBAAkB,IAAItB,QAAQQ,KAAAA,EAAOE,kBAAkB,CAAA;AAE7D,MAAIY,iBAAiB;AACnB,WAAO,IAAItB,QAAQa,MAAAA;EACrB;AAEA,SAAOQ,WACH,IAAIrB,QAAQa,MAAAA,EAAQO,IAAIZ,KAAAA,IACxB,IAAIR,QAAQa,MAAAA,EAAQM,IAAIX,KAAAA;AAC9B,GAd6B;AAgBtB,IAAMe,cAAc,wBAACC,WAAuC;AACjE,MAAI;AACF,WAAO,IAAIxB,QAAQwB,MAAAA,EAAkBC,YAAY,CAAA;EACnD,QAAE;AACA,WAAO;EACT;AACF,GAN2B;AAQpB,SAASC,WACdC,SACAC,SACA;AACA,SAAO,IAAI5B,QAAQ2B,OAAAA,EAASf,MAAMgB,OAAAA;AACpC;AALgBF","sourcesContent":["import Decimal from \"decimal.js\";\n\ntype PriceData = {\n  price: string;\n  volume: string;\n};\n\nexport const volumeAverage = (\n  prices: PriceData[],\n  totalVolume?: string,\n  estimateVolume?: boolean\n) => {\n  if (!totalVolume) {\n    return average(prices);\n  }\n\n  let volumeAccumulated = estimateVolume\n    ? convertVolume(totalVolume, prices[0]?.price, estimateVolume)\n    : new Decimal(totalVolume);\n  const data: PriceData[] = [];\n\n  for (const price of prices) {\n    if (volumeAccumulated.lessThanOrEqualTo(0)) {\n      break;\n    }\n    data.push(price);\n    volumeAccumulated = volumeAccumulated.minus(price.volume);\n  }\n\n  return average(data);\n};\n\nexport const average = (prices: PriceData[]) => {\n  const volume = prices.reduce(\n    (vol, next) => vol.add(next.volume),\n    new Decimal(0)\n  );\n  const priceVolume = prices.reduce(\n    (price, next) => price.add(new Decimal(next.price).mul(next.volume)),\n    new Decimal(0)\n  );\n\n  return priceVolume.div(volume);\n};\n\nexport const convertVolume = (\n  volume: string,\n  price = \"0\",\n  inverted?: boolean\n) => {\n  const isNegativePrice = new Decimal(price).lessThanOrEqualTo(0);\n\n  if (isNegativePrice) {\n    return new Decimal(volume);\n  }\n\n  return inverted\n    ? new Decimal(volume).div(price)\n    : new Decimal(volume).mul(price);\n};\n\nexport const validAmount = (amount?: string | number | Decimal) => {\n  try {\n    return new Decimal(amount as string).greaterThan(0);\n  } catch {\n    return false;\n  }\n};\n\nexport function difference(\n  number1: Decimal | string | number,\n  number2: Decimal | string | number\n) {\n  return new Decimal(number1).minus(number2);\n}\n"]}