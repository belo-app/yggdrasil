{"version":3,"sources":["../src/utils/grafana-loki.ts"],"names":["axios","dayjs","GrafanaLoki","canUse","environment","LOCAL","baseUrl","username","password","client","create","baseURL","auth","handleError","error","response","console","status","statusText","JSON","stringify","data","isAxiosError","code","message","pushLogs","logs","mappedLogs","map","log","stream","service","level","hostname","values","timestamp","toDate","getTime","toString","post","streams","catch","grafanaLoki","LOKI_HOST","LOKI_USER","LOKI_PASSWORD"],"mappings":";;;;;;;;AAAA,OAAOA,WAA8B;AACrC,OAAOC,WAAW;AAKlB,IAAMC,cAAN,6BAAMA,aAAAA;EACGC,SAAS,CAACC,YAAYC;EAM7B,YAAmBC,SAAiBC,UAAkBC,UAAkB;AACtE,SAAKF,UAAUA;AACf,SAAKC,WAAWA;AAChB,SAAKC,WAAWA;AAEhB,SAAKC,SAAST,MAAMU,OAAO;MACzBC,SAAS,KAAKL;MACdM,MAAM;QACJL,UAAU,KAAKA;QACfC,UAAU,KAAKA;MACjB;IACF,CAAA;EACF;EAEQK,cAAc,CAACC,UAAU;AAC/B,QAAIA,MAAMC,UAAU;AAClB,aAAOC,QAAQF,MACb,sDACEA,MAAMC,SAASE,WACZH,MAAMC,SAASG,gCAAgCC,KAAKC,UACvDN,MAAMC,SAASM,IAAI,GAClB;IAEP;AAEA,QAAIP,MAAMQ,iBAAiB,MAAM;AAC/B,aAAON,QAAQF,MACb,2EAA2EA,MAAMS,kBAAkBT,MAAMU,SAAS;IAEtH;AAEAR,YAAQF,MACN,oEACAA,KAAAA;EAEJ;EAEOW,WAAW,OAAOC,SAAgB;AACvC,QAAI,CAAC,KAAKvB,QAAQ;AAChB;IACF;AAEA,UAAMwB,aAAaD,KAAKE,IAAI,CAACC,QAAQ;AACnC,aAAO;QACLC,QAAQ;UACNC,SAASF,IAAIE;UACb3B,aAAayB,IAAIzB;UACjB4B,OAAOH,IAAIG;UACXC,UAAUJ,IAAII;QAChB;QACAC,QAAQ;UACN;aACGjC,MAAM4B,IAAIM,SAAS,EAAEC,OAAM,EAAGC,QAAO,IAAK,KAAWC,SAAQ;YAC9DnB,KAAKC,UAAUS,GAAAA;;;MAGrB;IACF,CAAA;AAEA,UAAM,KAAKpB,OACR8B,KAAK,qBAAqB;MAAEC,SAASb;IAAW,CAAA,EAChDc,MAAM,CAAC3B,UAAU,KAAKD,YAAYC,KAAAA,CAAAA;EACvC;AACF,GAtEA;AAwEO,IAAM4B,cAAc,IAAIxC,YAC7BE,YAAYuC,WACZvC,YAAYwC,WACZxC,YAAYyC,aAAa","sourcesContent":["import axios, { AxiosInstance } from \"axios\";\nimport dayjs from \"dayjs\";\n\nimport { environment } from \"./environment\";\nimport { Log } from \"./logger/pino\";\n\nclass GrafanaLoki {\n  public canUse = !environment.LOCAL;\n  private username!: string;\n  private password!: string;\n  private baseUrl!: string;\n  private client!: AxiosInstance;\n\n  public constructor(baseUrl: string, username: string, password: string) {\n    this.baseUrl = baseUrl;\n    this.username = username;\n    this.password = password;\n\n    this.client = axios.create({\n      baseURL: this.baseUrl,\n      auth: {\n        username: this.username,\n        password: this.password,\n      },\n    });\n  }\n\n  private handleError = (error) => {\n    if (error.response) {\n      return console.error(\n        `Attempting to send log to Loki failed with status '${\n          error.response.status\n        }: ${error.response.statusText}' returned reason: ${JSON.stringify(\n          error.response.data\n        )}`\n      );\n    }\n\n    if (error.isAxiosError === true) {\n      return console.error(\n        `Attempting to send log to Loki failed. Got an axios error, error code: '${error.code}' message: ${error.message}`\n      );\n    }\n\n    console.error(\n      \"Got unknown error when trying to send log to Loki, error output:\",\n      error\n    );\n  };\n\n  public pushLogs = async (logs: Log[]) => {\n    if (!this.canUse) {\n      return;\n    }\n\n    const mappedLogs = logs.map((log) => {\n      return {\n        stream: {\n          service: log.service,\n          environment: log.environment,\n          level: log.level,\n          hostname: log.hostname,\n        },\n        values: [\n          [\n            (dayjs(log.timestamp).toDate().getTime() * 1_000_000).toString(),\n            JSON.stringify(log),\n          ],\n        ],\n      };\n    });\n\n    await this.client\n      .post(\"/loki/api/v1/push\", { streams: mappedLogs })\n      .catch((error) => this.handleError(error));\n  };\n}\n\nexport const grafanaLoki = new GrafanaLoki(\n  environment.LOKI_HOST,\n  environment.LOKI_USER,\n  environment.LOKI_PASSWORD\n);\n"]}