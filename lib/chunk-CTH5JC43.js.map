{"version":3,"sources":["../src/utils/logger/index.ts"],"names":["logger","pinoLogger","listenLogs","logs","grafanaLoki","pushLogs","catch","bigQuery","get","dataset","table","insert","map","log","omit","getRequestLog","request","response","data","pick","queryParams","query","applicationName","user","username","userId","id","status","statusCode","loggerMiddleware","next","invalidUrl","includes","originalUrl","message","method","info"],"mappings":";;;;;;;;;;;;;;;;;;AACA,oBAA2B;AAMpB,IAAMA,SAASC;AAEtBD,OAAOE,WAAW,CAACC,SAAS;AAC1B,OAAKC,YAAYC,SAASF,IAAAA,EAAMG,MAAM,MAAM,MAAK;AAEjD,OAAKC,SACFC,IAAG,GACFC,QAAQ,SAAA,EACTC,MAAM,UAAA,EACNC,OACCR,KAAKS,IAAI,CAACC,YAAQC,oBAAKD,KAAK;IAAC;IAAY;IAAW;GAAc,CAAA,CAAA,EAEnEP,MAAM,MAAM,MAAK;AACtB,CAAA;AAEO,SAASS,cAAcC,SAAkBC,UAAoB;AAClE,QAAMC,WAA4BC,oBAAKH,SAAS;IAC9C;IACA;IACA;IACA;IACA;IACA;GACD;AAEDE,OAAKE,cAAcJ,QAAQK;AAC3BH,OAAKI,kBAAmBN,SAAiBO,MAAMC;AAC/CN,OAAKO,SAASP,KAAKI,kBAAkB,KAAMN,SAAiBO,MAAMG;AAClER,OAAKS,SAASV,SAASW;AAEvB,SAAOV;AACT;AAhBgBH;AAkBT,SAASc,mBAA4B;AAC1C,SAAO,CAACb,SAASC,UAAUa,SAAS;AAClC,UAAMC,aAAa;MAAC;MAAYC,SAAShB,QAAQiB,WAAW;AAE5D,QAAIF,YAAY;AACd,aAAOD,KAAAA;IACT;AAEA,UAAMI,UAAU,GAAGlB,QAAQmB,UAAUnB,QAAQiB;AAC7C,UAAMpB,MAAME,cAAcC,SAASC,QAAAA;AAEnCjB,WAAOoC,KAAKF,SAASrB,GAAAA;AAErB,WAAOiB,KAAAA;EACT;AACF;AAfgBD","sourcesContent":["import { Handler, Request, Response } from \"express\";\nimport { omit, pick } from \"lodash\";\n\nimport { bigQuery } from \"../bigquery\";\nimport { grafanaLoki } from \"../grafana-loki\";\nimport { pinoLogger } from \"./pino\";\n\nexport const logger = pinoLogger;\n\nlogger.listenLogs((logs) => {\n  void grafanaLoki.pushLogs(logs).catch(() => void 0);\n\n  void bigQuery\n    .get()\n    ?.dataset(\"applogs\")\n    .table(\"prodlogs\")\n    .insert(\n      logs.map((log) => omit(log, [\"trace_id\", \"span_id\", \"trace_flags\"]))\n    )\n    .catch(() => void 0);\n});\n\nexport function getRequestLog(request: Request, response: Response) {\n  const data: Record<string, any> = pick(request, [\n    \"method\",\n    \"url\",\n    \"headers\",\n    \"body\",\n    \"params\",\n    \"ip\",\n  ]);\n\n  data.queryParams = request.query;\n  data.applicationName = (request as any)?.user?.username;\n  data.userId = data.applicationName ? \"\" : (request as any)?.user?.id;\n  data.status = response.statusCode;\n\n  return data;\n}\n\nexport function loggerMiddleware(): Handler {\n  return (request, response, next) => {\n    const invalidUrl = [\"/graphql\"].includes(request.originalUrl);\n\n    if (invalidUrl) {\n      return next();\n    }\n\n    const message = `${request.method} ${request.originalUrl}`;\n    const log = getRequestLog(request, response);\n\n    logger.info(message, log);\n\n    return next();\n  };\n}\n"]}