{"version":3,"sources":["../src/utils/s3.ts"],"names":["AWS","https","config","update","region","environment","AWS_REGION","S3Bucket","constructor","bucket","client","S3","apiVersion","httpOptions","agent","Agent","keepAlive","maxSockets","getSignedUrl","key","Bucket","Key","getStreamFile","getObject","createReadStream","getJsonFile","data","promise","JSON","parse","Body","toString","exists","uploadFile","file","filename","folder","options","Promise","resolve","reject","upload","error","Location","moveFile","to","copyObject","CopySource","deleteObject","logger","fatal","uploadUserFile","fileExtension","getFileExtension","name","uuid","stream","undefined","ContentType","mimetype","ACL","isPrivate","deleteFile","done","getPublicImageUrl","S3_PUBLIC_BUCKET_NAME"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAS;AAEhB,OAAOC,WAAW;AAQlBD,IAAIE,OAAOC,OAAO;EAAEC,QAAQC,YAAYC;AAAW,CAAA;AAE5C,IAAMC,WAAN,MAAMA;EAWXC,YAAoBC,QAAgB;kBAAhBA;SAVZC,SAAS,IAAIV,IAAIW,GAAG;MAC1BC,YAAY;MACZC,aAAa;QACXC,OAAO,IAAIb,MAAMc,MAAM;UACrBC,WAAW;UACXC,YAAY;QACd,CAAA;MACF;IACF,CAAA;SAmGOC,eAAe,CAACC,QAAgB;AACrC,aAAO,KAAKT,OAAOQ,aAAa,aAAa;QAC3CE,QAAQ,KAAKX;QACbY,KAAKF;MACP,CAAA;IACF;EAtGqC;EAErC,MAAaG,cAAcD,KAA8B;AACvD,WAAO,KAAKX,OACTa,UAAU;MACTH,QAAQ,KAAKX;MACbY;IACF,CAAA,EACCG,iBAAgB;EACrB;EAEA,MAAaC,YAAYN,KAA2B;AAClD,UAAMO,OAAO,MAAM,KAAKhB,OACrBa,UAAU;MACTH,QAAQ,KAAKX;MACbY,KAAKF;IACP,CAAA,EACCQ,QAAO;AAEV,WAAOC,KAAKC,MAAMH,KAAKI,MAAMC,SAAAA,KAAc,IAAA;EAC7C;EAEA,MAAaC,OAAOb,KAA2B;AAC7C,QAAI;AACF,YAAM,KAAKT,OACRa,UAAU;QACTH,QAAQ,KAAKX;QACbY,KAAKF;MACP,CAAA,EACCQ,QAAO;AAEV,aAAO;IACT,QAAE;AACA,aAAO;IACT;EACF;EAEA,MAAaM,WACXC,MACAC,UACAC,QACAC,SACiB;AACjB,UAAMhB,MAAMe,SAAS,GAAGA,UAAUD,aAAaA;AAC/C,WAAO,IAAIG,QAAQ,CAACC,SAASC,WAAW;AACtC,WAAK9B,OAAO+B,OACV;QACErB,QAAQ,KAAKX;QACbY;QACAS,MAAMI;QACN,GAAGG;MACL,GACA,CAACK,OAAOhB,SAAS;AACf,YAAIgB,OAAO;AACT,iBAAOF,OAAOE,KAAAA;QAChB;AACAH,gBAAQb,KAAKiB,QAAQ;MACvB,CAAA;IAEJ,CAAA;EACF;EAEA,MAAaC,SAAST,UAAkBU,IAAY;AAClD,QAAI;AACF,YAAM,KAAKnC,OACRoC,WAAW;QACV1B,QAAQ,KAAKX;QACbsC,YAAY,KAAKtC,SAAS,MAAM0B;QAChCd,KAAKwB;MACP,CAAA,EACClB,QAAO;AAEV,YAAM,KAAKjB,OACRsC,aAAa;QACZ5B,QAAQ,KAAKX;QACbY,KAAKc;MACP,CAAA,EACCR,QAAO;IACZ,SAASe,OAAP;AACAO,aAAOC,MAAM,sBAAsB;QAAER;MAAM,CAAA;IAC7C;EACF;EAEA,MAAaS,eACXjB,MACAG,SACiB;AACjB,UAAMe,gBAAgBC,iBAAiBnB,KAAKC,QAAQ,KAAK;AACzD,UAAMmB,OAAO,GAAGC,KAAAA,KAAUH;AAC1B,UAAMI,SAAStB,KAAKV,iBAAgB;AAEpC,WAAO,KAAKS,WAAWuB,QAAQF,MAAMG,QAAW;MAC9CC,aAAaxB,KAAKyB;MAClBC,KAAKvB,SAASwB,YAAYJ,SAAY;IACxC,CAAA;EACF;EASOK,WAAW3C,KAAa4C,MAA8B;AAC3D,WAAO,KAAKrD,OAAOsC,aAAa;MAAE5B,QAAQ,KAAKX;MAAQY,KAAKF;IAAI,GAAG4C,IAAAA;EACrE;AACF;AAtHaxD;AAwHN,IAAMyD,oBAAoB,wBAACV,SAChC,WAAWjD,YAAY4D,4BAA4B5D,YAAYC,4BAA4BgD,QAD5D","sourcesContent":["import AWS from \"aws-sdk\";\nimport { FileUpload } from \"graphql-upload\";\nimport https from \"https\";\nimport { Stream } from \"stream\";\n\nimport { environment } from \"./environment\";\nimport { getFileExtension } from \"./files\";\nimport { logger } from \"./logger\";\nimport { uuid } from \"./uuid\";\n\nAWS.config.update({ region: environment.AWS_REGION });\n\nexport class S3Bucket {\n  private client = new AWS.S3({\n    apiVersion: \"2006-03-01\",\n    httpOptions: {\n      agent: new https.Agent({\n        keepAlive: true,\n        maxSockets: 1024,\n      }),\n    },\n  });\n\n  constructor(private bucket: string) {}\n\n  public async getStreamFile(Key: string): Promise<Stream> {\n    return this.client\n      .getObject({\n        Bucket: this.bucket,\n        Key,\n      })\n      .createReadStream();\n  }\n\n  public async getJsonFile(key: string): Promise<any> {\n    const data = await this.client\n      .getObject({\n        Bucket: this.bucket,\n        Key: key,\n      })\n      .promise();\n\n    return JSON.parse(data.Body?.toString() ?? \"{}\");\n  }\n\n  public async exists(key: string): Promise<any> {\n    try {\n      await this.client\n        .getObject({\n          Bucket: this.bucket,\n          Key: key,\n        })\n        .promise();\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  public async uploadFile(\n    file: Stream | Buffer,\n    filename: string,\n    folder?: string,\n    options?: Partial<AWS.S3.PutObjectRequest>\n  ): Promise<string> {\n    const Key = folder ? `${folder}/${filename}` : filename;\n    return new Promise((resolve, reject) => {\n      this.client.upload(\n        {\n          Bucket: this.bucket,\n          Key,\n          Body: file,\n          ...options,\n        },\n        (error, data) => {\n          if (error) {\n            return reject(error);\n          }\n          resolve(data.Location);\n        }\n      );\n    });\n  }\n\n  public async moveFile(filename: string, to: string) {\n    try {\n      await this.client\n        .copyObject({\n          Bucket: this.bucket,\n          CopySource: this.bucket + \"/\" + filename,\n          Key: to,\n        })\n        .promise();\n\n      await this.client\n        .deleteObject({\n          Bucket: this.bucket,\n          Key: filename,\n        })\n        .promise();\n    } catch (error) {\n      logger.fatal(`Move file S3 error`, { error });\n    }\n  }\n\n  public async uploadUserFile(\n    file: FileUpload,\n    options?: { isPrivate: boolean }\n  ): Promise<string> {\n    const fileExtension = getFileExtension(file.filename) ?? \"\";\n    const name = `${uuid()}.${fileExtension}`;\n    const stream = file.createReadStream();\n\n    return this.uploadFile(stream, name, undefined, {\n      ContentType: file.mimetype,\n      ACL: options?.isPrivate ? undefined : \"public-read\",\n    });\n  }\n\n  public getSignedUrl = (key: string) => {\n    return this.client.getSignedUrl(\"getObject\", {\n      Bucket: this.bucket,\n      Key: key,\n    });\n  };\n\n  public deleteFile(key: string, done?: (error, data) => void) {\n    return this.client.deleteObject({ Bucket: this.bucket, Key: key }, done);\n  }\n}\n\nexport const getPublicImageUrl = (name: string) =>\n  `https://${environment.S3_PUBLIC_BUCKET_NAME}.s3.${environment.AWS_REGION}.amazonaws.com/${name}`;\n"]}