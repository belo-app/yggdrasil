{"version":3,"sources":["../node_modules/mimic-fn/index.js","../src/utils/p-memoize.ts"],"names":["mimicFn","to","from","prop","Reflect","ownKeys","Object","defineProperty","getOwnPropertyDescriptor","module","exports","default","pMemoize","function_","cacheKey","cache","Map","maxAge","memoized","arguments_","key","isCached","has","get","promise","apply","result","set","error"],"mappings":";;;;;;;AAAA;;;AAEA,QAAMA,WAAU,wBAACC,IAAIC,SAAS;AAC7B,iBAAWC,QAAQC,QAAQC,QAAQH,IAAAA,GAAO;AACzCI,eAAOC,eAAeN,IAAIE,MAAMG,OAAOE,yBAAyBN,MAAMC,IAAAA,CAAAA;MACvE;AAEA,aAAOF;IACR,GANgB;AAQhBQ,WAAOC,UAAUV;AAEjBS,WAAOC,QAAQC,UAAUX;;;;;ACVzB,sBAAoB;AA4Bb,SAASY,SAIdC,WACA,EACEC,UACAC,QAAQ,oBAAIC,IAAAA,GACZC,OAAM,IACsC,CAAC,GAC5B;AACnB,QAAMC,WAAW,yCAEZC,YACsD;AACzD,UAAMC,MAAMN,WACRA,SAAAA,GAAYK,UAAAA,IACXA,WAAW;AAEhB,UAAME,WAAW,MAAMN,MAAMO,IAAIF,GAAAA;AAEjC,QAAIC,UAAU;AACZ,aAAON,MAAMQ,IAAIH,GAAAA;IACnB;AAEA,UAAMI,UAAUX,UAAUY,MAAM,MAAMN,UAAAA;AAItC,QAAI;AACF,YAAMO,SAAS,MAAMF;AAErBT,YAAMY,IAAIP,KAAKM,QAAQ;QAAET;MAAO,CAAA;AAEhC,aAAOS;IACT,SAASE,OAAP;AACA,YAAMA;IACR;EACF,GA3BiB;AA6BjB5B,sBAAAA,SAAQkB,UAAUL,SAAAA;AAElB,SAAOK;AACT;AA3CgBN","sourcesContent":["'use strict';\n\nconst mimicFn = (to, from) => {\n\tfor (const prop of Reflect.ownKeys(from)) {\n\t\tObject.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));\n\t}\n\n\treturn to;\n};\n\nmodule.exports = mimicFn;\n// TODO: Remove this for the next major release\nmodule.exports.default = mimicFn;\n","/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\nimport mimicFn from \"mimic-fn\";\nimport type { AsyncReturnType } from \"type-fest\";\n\ntype AnyAsyncFunction = (\n  ...arguments_: readonly any[]\n) => Promise<unknown | void>;\n\nexport interface CacheStorage<KeyType, ValueType> {\n  has: (key: KeyType) => Promise<boolean> | boolean;\n  get: (key: KeyType) => Promise<ValueType | undefined> | ValueType | undefined;\n  set: (key: KeyType, value: ValueType, options?: { maxAge?: number }) => void;\n  delete: (key: KeyType) => void;\n  clear?: () => void;\n}\n\ninterface Options<FunctionToMemoize extends AnyAsyncFunction, CacheKeyType> {\n  readonly cacheKey?: (\n    ...arguments_: Parameters<FunctionToMemoize>\n  ) => CacheKeyType;\n\n  readonly cache?: CacheStorage<\n    CacheKeyType,\n    AsyncReturnType<FunctionToMemoize>\n  >;\n\n  readonly maxAge?: number;\n}\n\nexport function pMemoize<\n  FunctionToMemoize extends AnyAsyncFunction,\n  CacheKeyType\n>(\n  function_: FunctionToMemoize,\n  {\n    cacheKey,\n    cache = new Map<CacheKeyType, AsyncReturnType<FunctionToMemoize>>(),\n    maxAge,\n  }: Options<FunctionToMemoize, CacheKeyType> = {}\n): FunctionToMemoize {\n  const memoized = async function (\n    this: any,\n    ...arguments_: Parameters<FunctionToMemoize>\n  ): Promise<AsyncReturnType<FunctionToMemoize> | undefined> {\n    const key = cacheKey\n      ? cacheKey(...arguments_)\n      : (arguments_[0] as CacheKeyType);\n\n    const isCached = await cache.has(key);\n\n    if (isCached) {\n      return cache.get(key);\n    }\n\n    const promise = function_.apply(this, arguments_) as Promise<\n      AsyncReturnType<FunctionToMemoize>\n    >;\n\n    try {\n      const result = await promise;\n\n      cache.set(key, result, { maxAge });\n\n      return result;\n    } catch (error: unknown) {\n      throw error as Error;\n    }\n  } as FunctionToMemoize;\n\n  mimicFn(memoized, function_);\n\n  return memoized;\n}\n"]}