{"version":3,"sources":["../src/utils/async.ts"],"names":["Point","axios","dayjs","to","promise","then","data","undefined","catch","error","logAxiosError","logger","response","message","code","config","JSON","stringify","cloneDeep","pick","handleAxiosError","setupAxios","instance","defaults","headers","Pragma","Expires","interceptors","request","use","metadata","start","uuid","Promise","reject","url","URL","baseURL","elapsed","diff","writeInfluxPoint","tag","toString","String","status","uintField","prometheusMetricsService","getOrCreateHistogram","unit","record"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAGA,oBAAgC;AAHhC,SAASA,aAAa;AACtB,OAAOC,WAA0C;AACjD,OAAOC,WAAW;AAQX,SAASC,GACdC,SAC0C;AAC1C,SAAOA,QACJC,KAAqB,CAACC,SAAY;IAACC;IAAWD;GAAK,EACnDE,MAAsB,CAACC,UAAa;AACnC,WAAO;MAACA;MAAOF;;EACjB,CAAA;AACJ;AARgBJ;AAUT,IAAMO,gBAAgB,wBAACD,UAAgC;AAC5DE,SAAOF,MAAM,eAAeA,OAAOG,UAAUN,MAAMO,WAAW,MAAM;IAClEC,MAAML,MAAMK;IACZC,QAAQ;MACN,GAAGN,MAAMM;MACTT,MACE,OAAOG,MAAMM,QAAQT,SAAS,WAC1BG,MAAMM,QAAQT,OACdU,KAAKC,cAAUC,yBAAUT,MAAMM,QAAQT,IAAAA,CAAAA;IAC/C;IACAM,cAAUO,oBAAKV,MAAMG,UAAU;MAAC;MAAQ;MAAU;MAAc;KAAU;EAC5E,CAAA;AACF,GAZ6B;AActB,IAAMQ,mBAAmB,wBAACX,UAAgC;AAC/DC,gBAAcD,KAAAA;AAEd,QAAMA;AACR,GAJgC;AAMzB,IAAMY,aAAa,wBAACC,aAA4B;AACrDA,WAASC,SAASC,UAAU;IAC1B,iBAAiB;IACjBC,QAAQ;IACRC,SAAS;EACX;AAEAJ,WAASK,aAAaC,QAAQC,IAC5B,CAACd,WAAgB;AACfA,WAAOe,WAAW;MAAEC,OAAO7B,MAAAA;IAAQ;AACnCa,WAAOS,QAAQ,uBAAuBQ,KAAAA;AAEtC,WAAOjB;EACT,GACA,CAACN,UAAU;AACT,WAAOwB,QAAQC,OAAOzB,KAAAA;EACxB,CAAA;AAGFa,WAASK,aAAaf,SAASiB,IAC7B,CAACjB,aAAa;AACZ,QAAI;AACF,YAAMuB,MAAM,IAAIC,IAAIxB,SAASG,OAAOoB,OAAO,IAAIvB,SAASG,OAAOsB,OAAO;AACtE,YAAMC,UAAUpC,MAAAA,EAAQqC,KACrB3B,SAASG,OAAee,SAASC,OAClC,cAAA;AAGFS,uBACE,IAAIxC,MAAM,sBAAA,EACPyC,IAAI,OAAON,IAAIO,SAAQ,CAAA,EACvBD,IAAI,UAAUE,OAAO/B,SAASgC,MAAM,CAAA,EACpCC,UAAU,WAAWP,OAAAA,CAAAA;AAG1BQ,+BACGC,qBAAqB,wBAAwB;QAC5CC,MAAM;MACR,CAAA,GACEC,OAAOX,SAAS;QAChBM,QAAQhC,SAASgC;QACjBT,KAAKvB,SAASG,OAAOsB;MACvB,CAAA;IACJ,QAAE;IAEF;AAEA,WAAOzB;EACT,GACA,CAACH,UAA2B;AAC1B,QAAI;AACF,YAAM0B,MAAM,IAAIC,IACd3B,MAAMG,UAAUG,OAAOoB,OAAO,IAC9B1B,MAAMG,UAAUG,OAAOsB,OAAO;AAEhC,YAAMC,UAAUpC,MAAAA,EAAQqC,KACrB9B,MAAMM,OAAee,SAASC,OAC/B,cAAA;AAGFS,uBACE,IAAIxC,MAAM,sBAAA,EACPyC,IAAI,OAAON,IAAIO,SAAQ,CAAA,EACvBD,IAAI,UAAUE,OAAOlC,MAAMG,UAAUgC,MAAAA,CAAAA,EACrCC,UAAU,WAAWP,OAAAA,CAAAA;AAG1BQ,+BACGC,qBAAqB,wBAAwB;QAC5CC,MAAM;MACR,CAAA,GACEC,OAAOX,SAAS;QAChBM,QAAQnC,MAAMG,UAAUgC;QACxBT,KAAK1B,MAAMG,UAAUG,OAAOsB;MAC9B,CAAA;IACJ,QAAE;IAEF;AAEA3B,kBAAcD,KAAAA;AAEd,WAAOwB,QAAQC,OAAOzB,KAAAA;EACxB,CAAA;AAEJ,GApF0B;AAsF1BY,WAAWpB,KAAAA","sourcesContent":["import { Point } from \"@influxdata/influxdb-client\";\nimport axios, { AxiosError, AxiosInstance } from \"axios\";\nimport dayjs from \"dayjs\";\nimport { cloneDeep, pick } from \"lodash\";\n\nimport { writeInfluxPoint } from \"./influx\";\nimport { logger } from \"./logger\";\nimport { prometheusMetricsService } from \"./metrics\";\nimport { uuid } from \"./uuid\";\n\nexport function to<T, U = Error>(\n  promise: Promise<T>\n): Promise<[U, undefined] | [undefined, T]> {\n  return promise\n    .then<[undefined, T]>((data: T) => [undefined, data])\n    .catch<[U, undefined]>((error: U) => {\n      return [error, undefined];\n    });\n}\n\nexport const logAxiosError = (error: AxiosError<any>): any => {\n  logger.error(`axios error ${error?.response?.data?.message ?? \"\"}`, {\n    code: error.code,\n    config: {\n      ...error.config,\n      data:\n        typeof error.config?.data === \"string\"\n          ? error.config?.data\n          : JSON.stringify(cloneDeep(error.config?.data)),\n    },\n    response: pick(error.response, [\"data\", \"status\", \"statusText\", \"headers\"]),\n  });\n};\n\nexport const handleAxiosError = (error: AxiosError<any>): any => {\n  logAxiosError(error);\n\n  throw error;\n};\n\nexport const setupAxios = (instance: AxiosInstance) => {\n  instance.defaults.headers = {\n    \"Cache-Control\": \"no-cache\",\n    Pragma: \"no-cache\",\n    Expires: \"0\",\n  } as any;\n\n  instance.interceptors.request.use(\n    (config: any) => {\n      config.metadata = { start: dayjs() };\n      config.headers[\"x-belo-request-id\"] = uuid();\n\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  instance.interceptors.response.use(\n    (response) => {\n      try {\n        const url = new URL(response.config.url ?? \"\", response.config.baseURL);\n        const elapsed = dayjs().diff(\n          (response.config as any).metadata.start,\n          \"milliseconds\"\n        );\n\n        writeInfluxPoint(\n          new Point(\"rest_client_response\")\n            .tag(\"url\", url.toString())\n            .tag(\"status\", String(response.status))\n            .uintField(\"elapsed\", elapsed)\n        );\n\n        prometheusMetricsService\n          .getOrCreateHistogram(\"rest_client_response\", {\n            unit: \"milliseconds\",\n          })\n          ?.record(elapsed, {\n            status: response.status,\n            url: response.config.baseURL,\n          });\n      } catch {\n        //\n      }\n\n      return response;\n    },\n    (error: AxiosError<any>) => {\n      try {\n        const url = new URL(\n          error.response?.config.url ?? \"\",\n          error.response?.config.baseURL\n        );\n        const elapsed = dayjs().diff(\n          (error.config as any).metadata.start,\n          \"milliseconds\"\n        );\n\n        writeInfluxPoint(\n          new Point(\"rest_client_response\")\n            .tag(\"url\", url.toString())\n            .tag(\"status\", String(error.response?.status))\n            .uintField(\"elapsed\", elapsed)\n        );\n\n        prometheusMetricsService\n          .getOrCreateHistogram(\"rest_client_response\", {\n            unit: \"milliseconds\",\n          })\n          ?.record(elapsed, {\n            status: error.response?.status,\n            url: error.response?.config.baseURL,\n          });\n      } catch {\n        //\n      }\n\n      logAxiosError(error);\n\n      return Promise.reject(error);\n    }\n  );\n};\n\nsetupAxios(axios);\n"]}