{"version":3,"sources":["../src/utils/sftp.ts"],"names":["sftp","Sftp","constructor","config","name","client","connect","end","listFiles","path","pattern","files","list","item","undefined","includes","test","catch","error","exists","getStreamFile","options","file","get"],"mappings":";;;;;AAAA,OAAOA,UAAwB;AAExB,IAAMC,OAAN,MAAMA;EAGXC,YAAoBC,QAA6BC,MAAe;kBAA5CD;AAClB,SAAKE,SAAS,IAAIL,KAAKI,IAAAA;EACzB;EAEQE,UAAU;AAChB,WAAO,KAAKD,OAAOC,QAAQ,KAAKH,MAAM;EACxC;EAEQI,MAAM;AACZ,WAAO,KAAKF,OAAOE,IAAG;EACxB;EAEA,MAAaC,UACXC,MACAC,SAC0B;AAC1B,UAAM,KAAKJ,QAAO;AAElB,UAAMK,QAAQ,MAAM,KAAKN,OAEtBO,KAAKH,MAAM,CAACI,SAAmB;AAC9B,UAAIH,YAAYI,QAAW;AACzB,eAAO;MACT;AAEA,UAAI,OAAOJ,YAAY,UAAU;AAC/B,eAAOG,KAAKT,KAAKW,SAASL,OAAAA;MAC5B;AACA,aAAOA,QAAQM,KAAKH,KAAKT,IAAI;IAC/B,CAAA,EACCa,MAAM,OAAOC,UAAU;AACtB,YAAM,KAAKX,IAAG;AACd,YAAMW;IACR,CAAA;AAEF,UAAM,KAAKX,IAAG;AAEd,WAAOI;EACT;EAEA,MAAaQ,OAAOV,MAAc;AAChC,UAAM,KAAKH,QAAO;AAElB,UAAMa,SAAS,MAAM,KAAKd,OAAOc,OAAOV,IAAAA,EAAMQ,MAAM,OAAOC,UAAU;AACnE,YAAM,KAAKX,IAAG;AACd,YAAMW;IACR,CAAA;AAEA,UAAM,KAAKX,IAAG;AAEd,WAAOY;EACT;EAEA,MAAaC,cACXX,MACAY,SACiB;AACjB,UAAM,KAAKf,QAAO;AAElB,UAAMgB,OAAO,MAAM,KAAKjB,OACrBkB,IAAId,MAAMK,QAAWO,OAAAA,EACrBJ,MAAM,OAAOC,UAAU;AACtB,YAAM,KAAKX,IAAG;AACd,YAAMW;IACR,CAAA;AAEF,UAAM,KAAKX,IAAG;AACd,WAAOe;EACT;AACF;AAxEarB","sourcesContent":["import sftp, { FileInfo } from \"ssh2-sftp-client\";\n\nexport class Sftp {\n  private client: sftp;\n\n  constructor(private config: sftp.ConnectOptions, name?: string) {\n    this.client = new sftp(name);\n  }\n\n  private connect() {\n    return this.client.connect(this.config);\n  }\n\n  private end() {\n    return this.client.end();\n  }\n\n  public async listFiles(\n    path: string,\n    pattern?: string | RegExp\n  ): Promise<sftp.FileInfo[]> {\n    await this.connect();\n\n    const files = await this.client\n      /*    // @ts-expect-error: Breaking change in version 9.x */\n      .list(path, (item: FileInfo) => {\n        if (pattern === undefined) {\n          return true;\n        }\n\n        if (typeof pattern === \"string\") {\n          return item.name.includes(pattern);\n        }\n        return pattern.test(item.name);\n      })\n      .catch(async (error) => {\n        await this.end();\n        throw error;\n      });\n\n    await this.end();\n\n    return files;\n  }\n\n  public async exists(path: string) {\n    await this.connect();\n\n    const exists = await this.client.exists(path).catch(async (error) => {\n      await this.end();\n      throw error;\n    });\n\n    await this.end();\n\n    return exists;\n  }\n\n  public async getStreamFile(\n    path: string,\n    options?: sftp.TransferOptions\n  ): Promise<Buffer> {\n    await this.connect();\n\n    const file = await this.client\n      .get(path, undefined, options)\n      .catch(async (error) => {\n        await this.end();\n        throw error;\n      });\n\n    await this.end();\n    return file as Buffer;\n  }\n}\n"]}