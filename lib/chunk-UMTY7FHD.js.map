{"version":3,"sources":["../src/utils/files.ts"],"names":["Duplex","streamToBuffer","stream","bufferData","on","data","push","Promise","resolve","reject","error","Buffer","concat","bufferToStream","buffer","getFileExtension","filename","split","pop"],"mappings":";;;;;AAAA,SAASA,cAAsB;AAExB,IAAMC,iBAAiB,wBAACC,WAAoC;AACjE,QAAMC,aAAoB,CAAA;AAE1BD,SAAOE,GAAG,QAAQ,CAACC,SAAS;AAC1BF,eAAWG,KAAKD,IAAAA;EAClB,CAAA;AAEA,SAAO,IAAIE,QAAQ,CAACC,SAASC,WAAW;AACtCP,WAAOE,GAAG,SAAS,CAACM,UAAU;AAC5BD,aAAOC,KAAAA;IACT,CAAA;AAEAR,WAAOE,GAAG,OAAO,MAAM;AACrBI,cAAQG,OAAOC,OAAOT,UAAAA,CAAAA;IACxB,CAAA;EACF,CAAA;AACF,GAhB8B;AAkBvB,IAAMU,iBAAiB,wBAACC,WAAmB;AAChD,QAAMZ,SAAS,IAAIF,OAAAA;AACnBE,SAAOI,KAAKQ,MAAAA;AAEZZ,SAAOI,KAAK,IAAI;AAChB,SAAOJ;AACT,GAN8B;AAQvB,SAASa,iBAAiBC,UAAkB;AACjD,SAAOA,SAASC,MAAM,GAAA,EAAKC,IAAG;AAChC;AAFgBH","sourcesContent":["import { Duplex, Stream } from \"stream\";\n\nexport const streamToBuffer = (stream: Stream): Promise<Buffer> => {\n  const bufferData: any[] = [];\n\n  stream.on(\"data\", (data) => {\n    bufferData.push(data);\n  });\n\n  return new Promise((resolve, reject) => {\n    stream.on(\"error\", (error) => {\n      reject(error);\n    });\n\n    stream.on(\"end\", () => {\n      resolve(Buffer.concat(bufferData));\n    });\n  });\n};\n\nexport const bufferToStream = (buffer: Buffer) => {\n  const stream = new Duplex();\n  stream.push(buffer);\n  // eslint-disable-next-line unicorn/no-null\n  stream.push(null);\n  return stream;\n};\n\nexport function getFileExtension(filename: string) {\n  return filename.split(\".\").pop();\n}\n"]}