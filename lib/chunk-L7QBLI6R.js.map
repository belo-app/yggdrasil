{"version":3,"sources":["../src/utils/qr/decoder.ts"],"names":["decode","emvString","spec","emvObject","inputText","length","emvItem","remainingText","readNext","emvResult","addMetaData","addMetaDataForAdditionalFields","id","slice","stringLength","Number","parseInt","isNaN","TypeError","data","name","getNameData","len","rawData","Math","max","functionGetName","getName","subData","getNameSubData","additionalFields","getNameAdditionalFields","paymentSpecific","getNamePaymentSpecific","mcc_code","mcc","find","item","usda_description","currency","currencies","number","code","country","countries"],"mappings":";;;;;;;;;;;;;;AAcO,SAASA,OAAOC,WAAmBC,OAAmB,QAAQ;AACnE,QAAMC,YAAY,CAAC;AAEnB,MAAIC,YAAYH;AAChB,SAAOG,UAAUC,SAAS,GAAG;AAC3B,UAAM,EAAEC,SAASC,cAAa,IAAKC,SAASJ,WAAWF,IAAAA;AACvD,QAAIO,YAAYH;AAChB,QAAIJ,SAAS,QAAQ;AACnBO,kBAAYC,YAAYJ,OAAAA;IAC1B,WAAWJ,QAAQ,oBAAoB;AACrCO,kBAAYE,+BAA+BL,OAAAA;IAC7C;AAEAH,cAAUM,UAAUG,MAAMH;AAC1BL,gBAAYG;EACd;AAEA,SAAOJ;AACT;AAlBgBH;AAoBhB,SAASQ,SAASJ,WAAmBF,MAAkB;AACrD,QAAMU,KAAKR,UAAUS,MAAM,GAAG,CAAA;AAC9B,QAAMC,eAAeV,UAAUS,MAAM,GAAG,CAAA;AACxC,QAAMR,SAASU,OAAOC,SAASF,YAAAA;AAC/B,MAAIC,OAAOE,MAAMZ,MAAAA,GAAS;AACxB,UAAM,IAAIa,UACR,6EAA6Ed,YAAY;EAE7F;AACA,QAAMe,QAAOf,UAAUS,MAAM,GAAGR,SAAS,CAAA;AACzC,QAAMC,UAAU;IACdM;IACAQ,MAAMC,YAAYnB,MAAMU,EAAAA;IACxBU,KAAKjB;IACLc,MAAAA;IACAI,SAASJ;EACX;AACA,QAAMZ,gBAAgBH,UAAUS,MAAMW,KAAKC,IAAI,GAAGpB,SAAS,CAAA,CAAA;AAC3D,SAAO;IACLC;IACAC;EACF;AACF;AAtBSC;AAwBT,IAAMkB,kBAAkB;EACtBP,MAAMQ;EACNC,SAASC;EACTC,kBAAkBC;EAClBC,iBAAiBC;AACnB;AAEA,SAASZ,YAAYnB,MAAkBU,IAAY;AACjD,SAAOc,gBAAgBxB,MAAMU,EAAAA;AAC/B;AAFSS;AAIT,SAASX,YAAYJ,SAAS;AAC5B,MAAIA,QAAQc,QAAQ,gCAAgC;AAClDd,YAAQa,OAAOnB,OAAOM,QAAQa,MAAM,SAAA;EACtC;AACA,MAAIb,QAAQM,MAAM,IAAI;AACpBN,YAAQa,OAAOnB,OAAOM,QAAQa,MAAM,SAAA;EACtC;AACA,MAAIb,QAAQM,MAAM,IAAI;AACpBN,YAAQa,OAAOnB,OAAOM,QAAQa,MAAM,SAAA;EACtC;AACA,MAAIb,QAAQM,MAAM,IAAI;AACpB,UAAMsB,WAAWf,KAAKgB,IAAIC,KAAK,CAACC,SAASA,KAAKF,QAAQ7B,QAAQa,IAAI;AAClEe,iBACG5B,QAAQa,OAAO,GAAGb,QAAQa,SAASe,SAASI;EACjD;AACA,MAAIhC,QAAQM,MAAM,IAAI;AACpB,UAAM2B,WAAWpB,KAAKqB,WAAWJ,KAC/B,CAACC,SAASA,KAAKI,WAAWnC,QAAQa,IAAI;AAExCoB,iBAAajC,QAAQa,OAAO,GAAGoB,SAASG;EAC1C;AACA,MAAIpC,QAAQM,MAAM,IAAI;AACpB,UAAM+B,UAAUxB,KAAKyB,UAAUR,KAAK,CAACC,SAASA,KAAKK,SAASpC,QAAQa,IAAI;AACxEwB,gBAAYrC,QAAQa,OAAO,GAAGb,QAAQa,SAASwB,QAAQvB;EACzD;AACA,SAAOd;AACT;AA1BSI;AA4BT,SAASC,+BAA+BL,SAAS;AAC/C,MAAIA,QAAQM,MAAM,MAAM;AACtBN,YAAQa,OAAOnB,OAAOM,QAAQa,MAAM,iBAAA;EACtC;AACA,SAAOb;AACT;AALSK","sourcesContent":["import { data } from \"../../utils/data\";\nimport {\n  getName,\n  getNameAdditionalFields,\n  getNamePaymentSpecific,\n  getNameSubData,\n} from \"./models\";\n\nexport type SpecQrData =\n  | \"data\"\n  | \"subData\"\n  | \"additionalFields\"\n  | \"paymentSpecific\";\n\nexport function decode(emvString: string, spec: SpecQrData = \"data\") {\n  const emvObject = {};\n\n  let inputText = emvString;\n  while (inputText.length > 0) {\n    const { emvItem, remainingText } = readNext(inputText, spec);\n    let emvResult = emvItem;\n    if (spec === \"data\") {\n      emvResult = addMetaData(emvItem);\n    } else if (spec == \"additionalFields\") {\n      emvResult = addMetaDataForAdditionalFields(emvItem);\n    }\n\n    emvObject[emvResult.id] = emvResult;\n    inputText = remainingText;\n  }\n\n  return emvObject;\n}\n\nfunction readNext(inputText: string, spec: SpecQrData) {\n  const id = inputText.slice(0, 2);\n  const stringLength = inputText.slice(2, 4);\n  const length = Number.parseInt(stringLength);\n  if (Number.isNaN(length)) {\n    throw new TypeError(\n      `Length definition expect a number. Incorrect length definition for value: ${inputText}.`\n    );\n  }\n  const data = inputText.slice(4, length + 4);\n  const emvItem = {\n    id,\n    name: getNameData(spec, id),\n    len: length,\n    data,\n    rawData: data,\n  };\n  const remainingText = inputText.slice(Math.max(0, length + 4));\n  return {\n    emvItem,\n    remainingText,\n  };\n}\n\nconst functionGetName = {\n  data: getName,\n  subData: getNameSubData,\n  additionalFields: getNameAdditionalFields,\n  paymentSpecific: getNamePaymentSpecific,\n};\n\nfunction getNameData(spec: SpecQrData, id: string) {\n  return functionGetName[spec](id);\n}\n\nfunction addMetaData(emvItem) {\n  if (emvItem.name == \"Merchant Account Information\") {\n    emvItem.data = decode(emvItem.data, \"subData\");\n  }\n  if (emvItem.id == 62) {\n    emvItem.data = decode(emvItem.data, \"subData\");\n  }\n  if (emvItem.id == 80) {\n    emvItem.data = decode(emvItem.data, \"subData\");\n  }\n  if (emvItem.id == 52) {\n    const mcc_code = data.mcc.find((item) => item.mcc === emvItem.data);\n    mcc_code &&\n      (emvItem.data = `${emvItem.data} (${mcc_code.usda_description})`);\n  }\n  if (emvItem.id == 53) {\n    const currency = data.currencies.find(\n      (item) => item.number === emvItem.data\n    );\n    currency && (emvItem.data = `${currency.code}`);\n  }\n  if (emvItem.id == 58) {\n    const country = data.countries.find((item) => item.code === emvItem.data);\n    country && (emvItem.data = `${emvItem.data} (${country.name})`);\n  }\n  return emvItem;\n}\n\nfunction addMetaDataForAdditionalFields(emvItem) {\n  if (emvItem.id == \"60\") {\n    emvItem.data = decode(emvItem.data, \"paymentSpecific\");\n  }\n  return emvItem;\n}\n"]}