{"version":3,"sources":["../src/utils/json-schema.ts"],"names":["Kind","Modifier","TypeBuilder","DateKind","Symbol","BeloTypeBuilder","Optional","item","nullable","Enum","type","enum","Object","keys","DateString","String","ObjectId","Type"],"mappings":";;;;;AAAA,SACEA,MACAC,UAIAC,mBACK;AAEP,IAAMC,WAAWC,OAAO,UAAA;AAYxB,IAAMC,kBAAN,6BAAMA,yBAAwBH,YAAAA;EACrBI,SAA4BC,MAAuB;AACxD,QAAIA,OAAOP,SAAS,SAAS;AAC3B,aAAOO;IACT;AACA,WAAO;MAAE,GAAGA;MAAM,CAACN,WAAW;MAAYO,UAAU;IAAK;EAC3D;EAEOC,KAAgDF,MAAmB;AACxE,WAAO;MAAEG,MAAM;MAAUC,MAAMC,OAAOC,KAAKN,IAAAA;IAAM;EACnD;EAEOO,aAAoB;AACzB,WAAO,KAAKC,OAAM;EACpB;EAEOC,WAAsB;AAC3B,WAAO,KAAKD,OAAM;EACpB;AACF,GAnBA;AAqBO,IAAME,OAAO,IAAIZ,gBAAAA","sourcesContent":["import {\n  Kind,\n  Modifier,\n  TEnum,\n  TOptional,\n  TSchema,\n  TypeBuilder,\n} from \"@sinclair/typebox\";\n\nconst DateKind = Symbol(\"DateKind\");\n\ninterface TDate extends TSchema {\n  type: \"string\";\n  $static: Date;\n  kind: typeof DateKind;\n}\n\ninterface TObjectId extends TSchema {\n  type: \"string\";\n}\n\nclass BeloTypeBuilder extends TypeBuilder {\n  public Optional<T extends TSchema>(item: T): TOptional<T> {\n    if (item?.[Kind] == \"Union\") {\n      return item as any;\n    }\n    return { ...item, [Modifier]: \"Optional\", nullable: true } as any;\n  }\n\n  public Enum<T extends Record<string, string | number>>(item: T): TEnum<T> {\n    return { type: \"string\", enum: Object.keys(item) } as any;\n  }\n\n  public DateString(): TDate {\n    return this.String() as any;\n  }\n\n  public ObjectId(): TObjectId {\n    return this.String();\n  }\n}\n\nexport const Type = new BeloTypeBuilder();\n"]}