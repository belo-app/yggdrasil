{"version":3,"sources":["../src/utils/cache.ts"],"names":["Cache","client","RedisClient","constructor","prefix","getKey","key","set","value","options","cacheKey","JSON","stringify","maxAge","get","parse","has","delete","Array","isArray","map","item","decrementUntil"],"mappings":";;;;;;;;AAIO,IAAMA,QAAN,MAAMA;EACHC,SAAS,IAAIC,YAAY,MAAA;EAGjCC,YAAYC,SAAS,IAAI;AACvB,SAAKA,SAASA;EAChB;EAEQC,OAAOC,KAAa;AAC1B,WAAO,GAAG,KAAKF,UAAUE;EAC3B;EAEA,MAAaC,IAAID,KAAaE,OAAcC,SAA+B;AACzE,QAAI;AACF,YAAMC,WAAW,KAAKL,OAAOC,GAAAA;AAE7B,aAAO,MAAM,KAAKL,OAAOM,IACvBG,UACAC,KAAKC,UAAUJ,KAAAA,GACfC,SAASI,MAAAA;IAEb,QAAE;IAEF;EACF;EAEA,MAAaC,IAAIR,KAAyC;AACxD,QAAI;AACF,YAAMI,WAAW,KAAKL,OAAOC,GAAAA;AAE7B,YAAME,QAAQ,MAAM,KAAKP,OAAOa,IAAIJ,QAAAA;AAEpC,UAAI,CAACF,OAAO;AACV;MACF;AAEA,aAAOG,KAAKI,MAAMP,KAAAA;IACpB,QAAE;IAEF;EACF;EAEA,MAAaQ,IAAIV,KAA+B;AAC9C,QAAI;AACF,YAAMI,WAAW,KAAKL,OAAOC,GAAAA;AAE7B,YAAME,QAAQ,MAAM,KAAKP,OAAOa,IAAIJ,QAAAA;AAEpC,aAAO,CAAC,CAACF;IACX,QAAE;AACA,aAAO;IACT;EACF;EAEOS,OAAOX,KAAwB;AACpC,UAAMI,WAAWQ,MAAMC,QAAQb,GAAAA,IAC3BA,IAAIc,IAAI,CAACC,SAAS,KAAKhB,OAAOgB,IAAAA,CAAAA,IAC9B,KAAKhB,OAAOC,GAAAA;AAEhB,WAAO,KAAKL,OAAOgB,OAAOP,QAAAA;EAC5B;EAEA,MAAaY,eAAehB,KAAaE,QAAQ,GAAG;AAClD,UAAME,WAAW,KAAKL,OAAOC,GAAAA;AAC7B,WAAO,KAAKL,OAAOqB,eAAeZ,UAAUF,KAAAA;EAC9C;AACF;AAlEaR","sourcesContent":["/* import { environment } from \"./environment\"; */\nimport { CacheStorage } from \"./p-memoize\";\nimport { RedisClient } from \"./redis-client\";\n\nexport class Cache<Value = any> implements CacheStorage<string, Value> {\n  private client = new RedisClient(\"mock\");\n  private prefix;\n\n  constructor(prefix = \"\") {\n    this.prefix = prefix;\n  }\n\n  private getKey(key: string) {\n    return `${this.prefix}-${key}`;\n  }\n\n  public async set(key: string, value: Value, options?: { maxAge?: number }) {\n    try {\n      const cacheKey = this.getKey(key);\n\n      return await this.client.set(\n        cacheKey,\n        JSON.stringify(value),\n        options?.maxAge\n      );\n    } catch {\n      //\n    }\n  }\n\n  public async get(key: string): Promise<Value | undefined> {\n    try {\n      const cacheKey = this.getKey(key);\n\n      const value = await this.client.get(cacheKey);\n\n      if (!value) {\n        return;\n      }\n\n      return JSON.parse(value);\n    } catch {\n      //\n    }\n  }\n\n  public async has(key: string): Promise<boolean> {\n    try {\n      const cacheKey = this.getKey(key);\n\n      const value = await this.client.get(cacheKey);\n\n      return !!value;\n    } catch {\n      return false;\n    }\n  }\n\n  public delete(key: string | string[]) {\n    const cacheKey = Array.isArray(key)\n      ? key.map((item) => this.getKey(item))\n      : this.getKey(key);\n\n    return this.client.delete(cacheKey);\n  }\n\n  public async decrementUntil(key: string, value = 0) {\n    const cacheKey = this.getKey(key);\n    return this.client.decrementUntil(cacheKey, value);\n  }\n}\n"]}