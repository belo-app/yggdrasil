{"version":3,"sources":["../src/utils/error.ts"],"names":["HttpStatusCode","BAD_REQUEST","UNAUTHORIZED","FORBIDDEN","NOT_FOUNT","TIMEOUT","TOO_MANY_REQUESTS","INTERNAL_SERVER_ERROR","ServerError","Error","constructor","name","description","data","statusCode","Object","setPrototypeOf","prototype","ErrorType","notImplemented","invalidCountry","invalidService","userNotFound","invalidSameUser","invalidCard","cardNotFound","invalidShipment","invalidMaxVirtualCard","invalidPinCard","invalidSamePinCard","invalidCardType","invalidPaymentCreateCard","invalidAlreadyHasCard","invalidCardAddress","invalidCardUserData","duplicateCardUser","invalidCardRequest","unauthorized","invalidParameter","invalidEmail","invalidTotp","totpAlreadyExists","invalidBelotag","invalidOwner","invalidCurrency","invalidAddressType","invalidAddress","invalidTransaction","invalidAmount","walletLimitSurpassed","swapDailyLimitSurpassed","swapMonthlyLimitSurpassed","swapYearlyLimitSurpassed","withdrawalDailyLimitSurpassed","withdrawalMonthlyLimitSurpassed","withdrawalYearlyLimitSurpassed","cardDailyLimitSurpassed","cardMonthlyLimitSurpassed","cardYearlyLimitSurpassed","invalidQuote","invalidPair","invalidUser","invalidUserData","invalidWallet","invalidQuantiaPair","invalidQuantiaCurrency","invalidQuantiaFunds","invalidOkexCurrency","invalidOkexFee","invalidWithdrawal","invalidContact","okexError","noOtcLiquidity","invalidPayment","invalidOperation","incompleteUser","invalidIdentityDocumentBadText","invalidIdentityDocumentBlurryText","invalidIdentityDocumentSmallImageSize","invalidIdentityDocumentUnexpectedData","invalidIdentityDocumentNoText","invalidIdentityDocumentNoFace","invalidIdentityDocumentIdenticalImage","invalidIdentityDocumentSimilarImage","invalidIdentityDocumentGrayscaleImage","invalidIdentityDocumentScreenPhoto","invalidIdentityDocumentNoDocument","invalidIdentityDocumentMissingFields","invalidIdentityDocumentWrongFormat","invalidIdentityDocumentNoMrz","invalidIdentityDocumentBadMrz","invalidIdentityDocumentNoPdf417","invalidIdentityDocumentBadPdf417","invalidIdentityDocumentTypeMismatch","invalidIdentityDocumentCountryMismatch","invalidIdentityVideoConversionFailed","invalidIdentityVideoMultipleFaces","invalidIdentityVideoNoFace","invalidIdentityInput","invalidIdentityDocumentType","invalidWebhook","invalidAliasFormat","aliasNotAvailable","hasNotMainAddress","invalidProvider","invalidPayload","invalidCustomer","inactiveCard","serviceNotAvailable","rechargeNotAvailable","invalidCampaign","duplicatedDcaConfig","invalidQrNotAvailable","invalidQrUnsupported","invalidQrMerchant","invalidQrError","unableRedactUser","invalidCardAuthorization","invalidClient","invalidCredentials","invalidUUID","invalidRegistration","invalidEntityType","invalidEntity","tooManyRequests","expired","forbidden","notAuthorized","invalidMFAValidationCode","invalidMFACode","mfaMethodAlreadyActivate","invalidMFAMethod","invalidMFAVerification","backoffFailed","badRequest","invalidPrice","invalidApplication","invalidEmployee","accountDeleted","invalidPermission","invalidPermissionGroup","mfaRequired","mfaFactorIdExpired","userLocked","invalidBulkOperation","notFound","missingParameter","unknownError","invalidMerchant","remainingBalance","paymentAlreadyProcessed","paymentFailed","tooEarly","lockCouldNotAcquireKeys","companyNotFound","paymentNotFound","invalidVersionHeader","updateRequired","invalidRateInvestment","invalidPhoneNumber","invalidBillAmount","invalidBillCompany","invalidBillExpired","productNotFound","invalidBillIdentifier","debtIdExpired","invalidUserType","invalidCronTime","errorCodeMap","Errors","keys","reduce","previous","isKnownError","values","includes"],"mappings":"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","sourcesContent":["export enum HttpStatusCode {\n  BAD_REQUEST = 400,\n  UNAUTHORIZED = 401,\n  FORBIDDEN = 403,\n  NOT_FOUNT = 404,\n  TIMEOUT = 408,\n  TOO_MANY_REQUESTS = 429,\n  INTERNAL_SERVER_ERROR = 500,\n}\n\nexport class ServerError extends Error {\n  constructor(\n    public name: string,\n    public description: string = \"\",\n    public data: Record<string, any> = {},\n    public statusCode: HttpStatusCode = HttpStatusCode.BAD_REQUEST\n  ) {\n    super(description);\n    Object.setPrototypeOf(this, new.target.prototype);\n  }\n}\n\nexport enum ErrorType {\n  notImplemented = \"NOT_IMPLEMENTED\",\n  invalidCountry = \"INVALID_COUNTRY\",\n  invalidService = \"SERVICE_NOT_ALLOW\",\n  userNotFound = \"USER_NOT_FOUND\",\n  invalidSameUser = \"INVALID_SAME_USER\",\n  invalidCard = \"INVALID_CARD\",\n  cardNotFound = \"CARD_NOT_FOUND\",\n  invalidShipment = \"INVALID_SHIPMENT\",\n  invalidMaxVirtualCard = \"INVALID_MAX_VIRTUAL_CARDS\",\n  invalidPinCard = \"INVALID_PIN_CARD\",\n  invalidSamePinCard = \"INVALID_SAME_PIN_CARD\",\n  invalidCardType = \"INVALID_CARD_TYPE\",\n  invalidPaymentCreateCard = \"INVALID_PAYMENT_CREATE_CARD\",\n  invalidAlreadyHasCard = \"INVALID_ALREADY_HAS_CARD\",\n  invalidCardAddress = \"INVALID_CARD_ADDRESS\",\n  invalidCardUserData = \"INVALID_CARD_USER_DATA\",\n  duplicateCardUser = \"INVALID_DUPLICATE_USER\",\n  invalidCardRequest = \"INVALID_CARD_REQUEST\",\n  unauthorized = \"UNAUTHORIZED\",\n  invalidParameter = \"INVALID_PARAMETER\",\n  invalidEmail = \"INVALID_EMAIL\",\n  invalidTotp = \"INVALID_TOTP\",\n  totpAlreadyExists = \"TOTP_ALREADY_EXISTS\",\n  invalidBelotag = \"INVALID_BELOTAG\",\n  invalidOwner = \"INVALID_OWNER\",\n  invalidCurrency = \"INVALID_CURRENCY\",\n  invalidAddressType = \"INVALID_ADDRESS_TYPE\",\n  invalidAddress = \"INVALID_ADDRESS\",\n  invalidTransaction = \"INVALID_TRANSACTION\",\n  invalidAmount = \"INVALID_AMOUNT\",\n  walletLimitSurpassed = \"WALLET_LIMIT_SURPASSED\",\n  swapDailyLimitSurpassed = \"SWAP_DAILY_LIMIT_SURPASSED\",\n  swapMonthlyLimitSurpassed = \"SWAP_MONTHLY_LIMIT_SURPASSED\",\n  swapYearlyLimitSurpassed = \"SWAP_YEARLY_LIMIT_SURPASSED\",\n  withdrawalDailyLimitSurpassed = \"WITHDRAWAL_DAILY_LIMIT_SURPASSED\",\n  withdrawalMonthlyLimitSurpassed = \"WITHDRAWAL_MONTHLY_LIMIT_SURPASSED\",\n  withdrawalYearlyLimitSurpassed = \"WITHDRAWAL_YEARLY_LIMIT_SURPASSED\",\n  cardDailyLimitSurpassed = \"CARD_DAILY_LIMIT_SURPASSED\",\n  cardMonthlyLimitSurpassed = \"CARD_MONTHLY_LIMIT_SURPASSED\",\n  cardYearlyLimitSurpassed = \"CARD_YEARLY_LIMIT_SURPASSED\",\n  invalidQuote = \"INVALID_QUOTE\",\n  invalidPair = \"INVALID_PAIR\",\n  invalidUser = \"INVALID_USER\",\n  invalidUserData = \"INVALID_USER_DATA\",\n  invalidWallet = \"INVALID_WALLET\",\n  invalidQuantiaPair = \"INVALID_QUANTIA_PAIR\",\n  invalidQuantiaCurrency = \"INVALID_QUANTIA_CURRENCY\",\n  invalidQuantiaFunds = \"INVALID_QUANTIA_FUNDS\",\n  invalidOkexCurrency = \"INVALID_OKEX_CURRENCY\",\n  invalidOkexFee = \"INVALID_OKEX_FEE\",\n  invalidWithdrawal = \"INVALID_WITHDRAWAL\",\n  invalidContact = \"INVALID_CONTACT\",\n  okexError = \"OKEX_ERROR\",\n  noOtcLiquidity = \"NO_OTC_LIQUIDITY\",\n  invalidPayment = \"INVALID_PAYMENT\",\n  invalidOperation = \"INVALID_OPERATION\",\n  incompleteUser = \"INCOMPLETE_USER\",\n  invalidIdentityDocumentBadText = \"INVALID_IDENTITY_DOCUMENT_BAD_TEXT\",\n  invalidIdentityDocumentBlurryText = \"INVALID_IDENTITY_DOCUMENT_BLURRY_TEXT\",\n  invalidIdentityDocumentSmallImageSize = \"INVALID_IDENTITY_DOCUMENT_SMALL_IMAGE_SIZE\",\n  invalidIdentityDocumentUnexpectedData = \"INVALID_IDENTITY_DOCUMENT_UNEXPECTED_DATA\",\n  invalidIdentityDocumentNoText = \"INVALID_IDENTITY_DOCUMENT_NO_TEXT\",\n  invalidIdentityDocumentNoFace = \"INVALID_IDENTITY_DOCUMENT_NO_FACE\",\n  invalidIdentityDocumentIdenticalImage = \"INVALID_IDENTITY_DOCUMENT_IDENTICAL_IMAGE\",\n  invalidIdentityDocumentSimilarImage = \"INVALID_IDENTITY_DOCUMENT_SIMILAR_IMAGE\",\n  invalidIdentityDocumentGrayscaleImage = \"INVALID_IDENTITY_DOCUMENT_GRAYSCALE_IMAGE\",\n  invalidIdentityDocumentScreenPhoto = \"INVALID_IDENTITY_DOCUMENT_SCREEN_PHOTO\",\n  invalidIdentityDocumentNoDocument = \"INVALID_IDENTITY_DOCUMENT_NO_DOCUMENT\",\n  invalidIdentityDocumentMissingFields = \"INVALID_IDENTITY_DOCUMENT_MISSING_FIELDS\",\n  invalidIdentityDocumentWrongFormat = \"INVALID_IDENTITY_DOCUMENT_WRONG_FORMAT\",\n  invalidIdentityDocumentNoMrz = \"INVALID_IDENTITY_DOCUMENT_NO_MRZ\",\n  invalidIdentityDocumentBadMrz = \"INVALID_IDENTITY_DOCUMENT_BAD_MRZ\",\n  invalidIdentityDocumentNoPdf417 = \"INVALID_IDENTITY_DOCUMENT_NO_PDF_417\",\n  invalidIdentityDocumentBadPdf417 = \"INVALID_IDENTITY_DOCUMENT_BAD_PDF_417\",\n  invalidIdentityDocumentTypeMismatch = \"INVALID_IDENTITY_DOCUMENT_TYPE_MISMATCH\",\n  invalidIdentityDocumentCountryMismatch = \"INVALID_IDENTITY_DOCUMENT_COUNTRY_MISMATCH\",\n  invalidIdentityVideoConversionFailed = \"INVALID_IDENTITY_VIDEO_CONVERSION_FAILED\",\n  invalidIdentityVideoMultipleFaces = \"INVALID_IDENTITY_VIDEO_MULTIPLE_FACES\",\n  invalidIdentityVideoNoFace = \"INVALID_IDENTITY_VIDEO_MULTIPLE_FACES\",\n  invalidIdentityInput = \"INVALID_IDENTITY_INPUT\",\n  invalidIdentityDocumentType = \"INVALID_IDENTITY_DOCUMENT_TYPE\",\n  invalidWebhook = \"INVALID_WEBHOOK\",\n  invalidAliasFormat = \"INVALID_ALIAS_FORMAT\",\n  aliasNotAvailable = \"ALIAS_NOT_AVAILABLE\",\n  hasNotMainAddress = \"HAS_NOT_MAIN_ADDRESS\",\n  invalidProvider = \"INVALID_PROVIDER\",\n  invalidPayload = \"INVALID_PAYLOAD\",\n  invalidCustomer = \"INVALID_CUSTOMER\",\n  inactiveCard = \"CARD_INACTIVE\",\n  serviceNotAvailable = \"SERVICE_NOT_AVAILABLE\",\n  rechargeNotAvailable = \"RECHARGE_NOT_AVAILABLE\",\n  invalidCampaign = \"INVALID_CAMPAIGN\",\n  duplicatedDcaConfig = \"DUPLICATED_DCA_CONFIG\",\n  invalidQrNotAvailable = \"INVALID_QR_NOT_AVAILABLE\",\n  invalidQrUnsupported = \"INVALID_QR_UNSUPPORTED\",\n  invalidQrMerchant = \"INVALID_QR_MERCHANT\",\n  invalidQrError = \"INVALID_QR_ERROR\",\n  unableRedactUser = \"UNABLE_REDACT_USER\",\n  invalidCardAuthorization = \"INVALID_CARD_AUTHORIZATION\",\n  invalidClient = \"INVALID_CLIENT\",\n  invalidCredentials = \"INVALID_CREDENTIALS\",\n  invalidUUID = \"INVALID_UUID\",\n  invalidRegistration = \"INVALID_REGISTRATION\",\n  invalidEntityType = \"INVALID_ENTITY_TYPE\",\n  invalidEntity = \"INVALID_ENTITY\",\n  tooManyRequests = \"TOO_MANY_REQUESTS\",\n  expired = \"EXPIRED\",\n  forbidden = \"FORBIDDEN\",\n  notAuthorized = \"NOT_AUTHORIZED\",\n  invalidMFAValidationCode = \"INVALID_MFA_VALIDATION_CODE\",\n  invalidMFACode = \"INVALID_MFA_CODE\",\n  mfaMethodAlreadyActivate = \"MFA_METHOD_ALREADY_ACTIVATE\",\n  invalidMFAMethod = \"INVALID_MFA_METHOD\",\n  invalidMFAVerification = \"INVALID_MFA_VERIFICATION\",\n  backoffFailed = \"BACKOFF_FAILED\",\n  badRequest = \"BAD_REQUEST\",\n  invalidPrice = \"INVALID_PRICE\",\n  invalidApplication = \"INVALID_APPLICATION\",\n  invalidEmployee = \"INVALID_EMPLOYEE\",\n  accountDeleted = \"ACCOUNT_DELETED\",\n  invalidPermission = \"INVALID_PERMISSION\",\n  invalidPermissionGroup = \"INVALID_PERMISSION_GROUP\",\n  mfaRequired = \"MFA_REQUIRED\",\n  mfaFactorIdExpired = \"MFA_FACTOR_ID_EXPIRED\",\n  userLocked = \"USER_LOCKED\",\n  invalidBulkOperation = \"INVALID_BULK_OPERATION\",\n  notFound = \"NOT_FOUND\",\n  missingParameter = \"MISSING_PARAMETER\",\n  unknownError = \"UNKNOWN_ERROR\",\n  invalidMerchant = \"INVALID_MERCHANT\",\n  remainingBalance = \"REMAINING_BALANCE\",\n  paymentAlreadyProcessed = \"PAYMENT_ALREADY_PROCESSED\",\n  paymentFailed = \"PAYMENT_FAILED\",\n  tooEarly = \"TOO_EARLY\",\n  lockCouldNotAcquireKeys = \"LOCK_COULD_NOT_ACQUIRE_KEYS\",\n  companyNotFound = \"COMPANY_NOT_FOUND\",\n  paymentNotFound = \"PAYMENT_NOT_FOUND\",\n  invalidVersionHeader = \"INVALID_VERSION_HEADER\",\n  updateRequired = \"UPDATE_REQUIRED\",\n  invalidRateInvestment = \"INVALID_RATE_INVESTMENT\",\n  invalidPhoneNumber = \"INVALID_PHONE_NUMBER\",\n  invalidBillAmount = \"INVALID_BILL_AMOUNT\",\n  invalidBillCompany = \"INVALID_BILL_COMPANY\",\n  invalidBillExpired = \"INVALID_BILL_EXPIRED\",\n  productNotFound = \"PRODUCT_NOT_FOUND\",\n  invalidBillIdentifier = \"INVALID_BILL_IDENTIFIER\",\n  debtIdExpired = \"DEBT_ID_EXPIRED\",\n  invalidUserType = \"INVALID_USER_TYPE\",\n  invalidCronTime = \"INVALID_CRON_TIME\",\n}\n\nexport type ErrorName = keyof typeof ErrorType;\n\nconst errorCodeMap = {\n  [ErrorType.tooManyRequests]: HttpStatusCode.TOO_MANY_REQUESTS,\n  [ErrorType.forbidden]: HttpStatusCode.FORBIDDEN,\n  [ErrorType.unauthorized]: HttpStatusCode.UNAUTHORIZED,\n  [ErrorType.mfaFactorIdExpired]: HttpStatusCode.UNAUTHORIZED,\n  [ErrorType.invalidMFAValidationCode]: HttpStatusCode.FORBIDDEN,\n  [ErrorType.invalidMFACode]: HttpStatusCode.FORBIDDEN,\n  [ErrorType.mfaRequired]: HttpStatusCode.FORBIDDEN,\n  [ErrorType.invalidWebhook]: HttpStatusCode.INTERNAL_SERVER_ERROR,\n};\n\ntype ErrorHandler = (\n  description?: string,\n  data?: Record<string, any>\n) => ServerError;\n\nexport const Errors = Object.keys(ErrorType).reduce(\n  (previous, name) => ({\n    ...previous,\n    [name]: (description, data) =>\n      new ServerError(\n        ErrorType[name],\n        description,\n        data,\n        errorCodeMap[ErrorType[name]]\n      ),\n  }),\n  {}\n) as Record<ErrorName, ErrorHandler>;\n\nexport const isKnownError = (name: string) => {\n  return Object.values(ErrorType).includes(name as ErrorType);\n};\n"]}