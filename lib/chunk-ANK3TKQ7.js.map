{"version":3,"sources":["../src/utils/lambda.ts"],"names":["AWS","https","lambda","Lambda","apiVersion","httpOptions","agent","Agent","keepAlive","maxSockets","invoke","parameters","Promise","resolve","reject","error","data","result","JSON","parse","Payload"],"mappings":";;;;;AAAA,OAAOA,SAAS;AAEhB,OAAOC,WAAW;AAElB,IAAMC,SAAS,IAAIF,IAAIG,OAAO;EAC5BC,YAAY;EACZC,aAAa;IACXC,OAAO,IAAIL,MAAMM,MAAM;MACrBC,WAAW;MACXC,YAAY;IACd,CAAA;EACF;AACF,CAAA;AAEO,IAAMC,SAAS,wBAACC,eAAkC;AACvD,SAAO,IAAIC,QAAQ,CAACC,SAASC,WAAW;AACtCZ,WAAOQ,OAAOC,YAAY,SAAUI,OAAOC,MAAM;AAC/C,UAAID,OAAO;AACT,eAAOD,OAAOC,KAAAA;MAChB;AACA,UAAI;AACF,cAAME,SAASC,KAAKC,MAAMH,MAAMI,OAAAA;AAChCP,gBAAQI,MAAAA;MACV,QAAE;AACAJ,gBAAQG,MAAMI,OAAAA;MAChB;IACF,CAAA;EACF,CAAA;AACF,GAdsB","sourcesContent":["import AWS from \"aws-sdk\";\nimport { InvocationRequest } from \"aws-sdk/clients/lambda\";\nimport https from \"https\";\n\nconst lambda = new AWS.Lambda({\n  apiVersion: \"2015-03-31\",\n  httpOptions: {\n    agent: new https.Agent({\n      keepAlive: true,\n      maxSockets: 1024,\n    }),\n  },\n});\n\nexport const invoke = (parameters: InvocationRequest) => {\n  return new Promise((resolve, reject) => {\n    lambda.invoke(parameters, function (error, data) {\n      if (error) {\n        return reject(error);\n      }\n      try {\n        const result = JSON.parse(data?.Payload as string);\n        resolve(result);\n      } catch {\n        resolve(data?.Payload);\n      }\n    });\n  });\n};\n"]}